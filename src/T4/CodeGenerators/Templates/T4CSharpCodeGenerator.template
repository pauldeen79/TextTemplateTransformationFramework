<#@ template language="C#" className="TextTemplateTransformationFramework.T4.CodeGenerators.T4CSharpCodeGenerator" #>
<#@ parameterProperties #>
<#@ addChildTemplateCode override="true" clearFieldsOnOverride="true" #>
<#@ additionalActionDelegate #>
<#@ useTemplateRuntimeBaseClass #>
<#@ addExcludeFromCodeCoverageAttributes #>
<#@ output extension="cs" #>
<#@ assembly name="TextTemplateTransformationFramework.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" #>
<#@ assembly name="TextTemplateTransformationFramework.T4, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" #>
<#@ assembly name="Utilities, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" #>
<#@ assembly hintPath="$(BasePath)Common\bin\Debug\netstandard2.0" #>
<#@ assembly hintPath="$(BasePath)Runtime\bin\Debug\netstandard2.0" #>
<#@ import namespace="TextTemplateTransformationFramework.Common.Contracts" #>
<#@ import namespace="TextTemplateTransformationFramework.Common.Contracts.TemplateTokens" #>
<#@ import namespace="TextTemplateTransformationFramework.Common.Contracts.TemplateTokens.ClassFooterTokens" #>
<#@ import namespace="TextTemplateTransformationFramework.Common.Contracts.TemplateTokens.InitializeTokens" #>
<#@ import namespace="TextTemplateTransformationFramework.Common.Contracts.TemplateTokens.MessageTokens" #>
<#@ import namespace="TextTemplateTransformationFramework.Common.Contracts.TemplateTokens.NamespaceFooterTokens" #>
<#@ import namespace="TextTemplateTransformationFramework.Common.Contracts.TemplateTokens.RenderTokens" #>
<#@ import namespace="Utilities.Extensions" #>
<#@ includes Path="$(BasePath)T4\CodeGenerators\Templates\Includes" SearchPattern="*.ttinclude" Recurse="true" #>
<#@ registerChildTemplates path="$(BasePath)T4\CodeGenerators\Templates\ChildTemplates" searchPattern="*.template" recurse="true" #>
<#@ registerViewModels path="$(BasePath)T4\CodeGenerators\Templates\ChildTemplates" searchPattern="*.viewmodel" recurse="true" #>
<#@ model type="System.Collections.Generic.IEnumerable`1" genericTypeParameter="TextTemplateTransformationFramework.Common.Contracts.ITemplateToken<TokenParserState>" #>
<#@ property name="TemplateNamespace" type="System.String" browsable="false" defaultValue="GeneratedNamespace" defaultValueIsLiteral="true" #>
<#@ property name="TemplateClassName" type="System.String" browsable="false" defaultValue="GeneratedTemplate" defaultValueIsLiteral="true" #>
<#@ property name="GeneratorName" type="System.String" browsable="false" defaultValue="TextTemplateTransformationFramework.T4" defaultValueIsLiteral="true" #>
<#@ property name="GeneratorVersion" type="System.String" browsable="false" defaultValue="1.0.0.0" defaultValueIsLiteral="true" #>
<#@ property name="TemplateIsOverride" type="System.Boolean" browsable="false" defaultValue="false" #>
<#@ property name="CultureCode" type="System.String" browsable="false" defaultValue="en-US" defaultValueIsLiteral="true" #>
<#@ property name="SkipInitializationCode" type="System.Boolean" browsable="false" defaultValue="false" #>
<#@ property name="BaseClassInheritsFrom" type="System.String" browsable="false" #>
<#@ property name="GenerationEnvironmentAccessor" type="System.String" browsable="false" defaultValue="protected" defaultValueIsLiteral="true" #>
<#@ property name="AddTemplateLineNumbers" type="System.Boolean" browsable="false" defaultValue="true" #>
<#@ property name="EnvironmentVersion" type="System.String" browsable="false" #>
<#@ property name="AddExcludeFromCodeCoverageAttribute" type="System.Boolean" browsable="false" defaultValue="false" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: <#= !string.IsNullOrEmpty(EnvironmentVersion) ? EnvironmentVersion : Environment.Version.ToString() #>
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace <#= TemplateNamespace #>
{
<#@ RenderChildTemplate model="Model.OfType<INamespaceImportToken<TokenParserState>>().DistinctBy(t => t.Namespace).OrderBy(t => t.Namespace)" customRenderChildTemplateDelegate="RenderWithHeaderAndFooter" #>

<#@ RenderChildTemplate model="this" customResolverDelegate="MainClassTemplate" customRenderChildTemplateDelegate="RenderWithHeaderAndFooter" #>

<# if (!TemplateIsOverride)
   { #>
<#@ RenderChildTemplate model="this" customResolverDelegate="BaseClassTemplate" customRenderChildTemplateDelegate="RenderWithHeaderAndFooter" #>
<# } #>
<#@ RenderChildTemplate model="Model.OfType<INamespaceFooterToken<TokenParserState>>()" customResolverDelegate="NamespaceFooterTemplate" customRenderChildTemplateDelegate="RenderWithHeaderAndFooter" #>

}