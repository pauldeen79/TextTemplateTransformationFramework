<#@ template language="c#" #>
<#@ templateName value="T4CSharpCodeGenerator.BaseClass.Template" #>
<#@ model type="T4CSharpCodeGenerator" #>
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
<#@ RenderChildTemplate model="new GeneratorModel(Model.GeneratorName, Model.GeneratorVersion)" name="T4CSharpCodeGenerator.GeneratedCodeAttribute.Template" customRenderChildTemplateDelegate="RenderWithHeaderAndFooter" #>
<#@ RenderChildTemplate model="Model" name="T4CSharpCodeGenerator.ExcludeFromCodeCoverageAttribute.Template" customRenderChildTemplateDelegate="RenderWithHeaderAndFooter" #>
    public partial class <#= Model.TemplateClassName #>Base<# if (!string.IsNullOrEmpty(Model.BaseClassInheritsFrom)) { #> : <#= Model.BaseClassInheritsFrom #><# } WriteLine(""); #>
    {
<# if (!Model.SkipInitializationCode)
   { #>
        #region CompilerError
        public class CompilerError
        {
            public CompilerError(int column, string errorNumber, string errorText, string fileName, bool isWarning, int line)
            {
                Column = column;
                ErrorNumber = errorNumber;
                ErrorText = errorText;
                FileName = fileName;
                IsWarning = isWarning;
                Line = line;
            }

            public int Column { get; private set; }
            public string ErrorNumber { get; private set; }
            public string ErrorText { get; private set; }
            public string FileName { get; private set; }
            public bool IsWarning { get; private set; }
            public int Line { get; private set; }

            public override string ToString()
            {
                return string.Format("{0}({1},{2}): {3}{4}: {5}"
                    , FileName
                    , Line
                    , Column
                    , IsWarning
                        ? "warning"
                        : "error"
                    , string.IsNullOrEmpty(ErrorNumber)
                        ? string.Empty
                        : " " + ErrorNumber
                    , ErrorText);
            }
        }
        #endregion
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.Collections.Generic.List<CompilerError> errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        <#= Model.GenerationEnvironmentAccessor #> System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.Collections.Generic.List<CompilerError> Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.Collections.Generic.List<CompilerError>();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public virtual void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public virtual void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            CompilerError error = new CompilerError(1, "TemplateError", message, "T4GeneratedTemplateBase.cs", false, 1);
            Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            CompilerError error = new CompilerError(1, "TemplateWarning", message, "T4GeneratedTemplateBase.cs", true, 1);
            Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
<#@ RenderChildTemplate model="Model" customResolverDelegate="ToStringInstanceHelperTemplate" customRenderChildTemplateDelegate="RenderWithHeaderAndFooter" #>

<# } #>

<#@ RenderChildTemplate model="Model.Model.OfType<IBaseClassFooterToken<TokenParserState>>()" customResolverDelegate="BaseClassFooterTemplate" customRenderChildTemplateDelegate="RenderWithHeaderAndFooter" #>

    }
    #endregion
