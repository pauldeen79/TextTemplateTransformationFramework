<#@ template language="c#" #>
<#@ templateName value="T4CSharpCodeGenerator.ToStringInstanceHelper.Template" #>
<#@ model type="T4CSharpCodeGenerator" #>
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            public bool AllowNullExpressions { get; set; }

            private System.IFormatProvider formatProviderField = new global::System.Globalization.CultureInfo(<#= Model.CultureCode.CsharpFormat() #>);
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField;
                }
                set
                {
                    if (value != null)
                    {
                        this.formatProviderField = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if (objectToConvert == null)
                {
                    if (AllowNullExpressions)
                    {
                        return string.Empty;
                    }
                    throw new ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] { typeof(System.IFormatProvider)});
                if (method == null)
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] { this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
            set
            {
                this.toStringHelperField = value;
            }
        }
        #endregion
