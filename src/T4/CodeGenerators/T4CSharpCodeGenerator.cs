// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 5.0.13
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace TextTemplateTransformationFramework.T4.CodeGenerators
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using TextTemplateTransformationFramework.Common.Contracts;
    using TextTemplateTransformationFramework.Common.Contracts.TemplateTokens;
    using TextTemplateTransformationFramework.Common.Contracts.TemplateTokens.ClassFooterTokens;
    using TextTemplateTransformationFramework.Common.Contracts.TemplateTokens.InitializeTokens;
    using TextTemplateTransformationFramework.Common.Contracts.TemplateTokens.MessageTokens;
    using TextTemplateTransformationFramework.Common.Contracts.TemplateTokens.NamespaceFooterTokens;
    using TextTemplateTransformationFramework.Common.Contracts.TemplateTokens.RenderTokens;
    using TextTemplateTransformationFramework.Runtime;
    using Utilities.Extensions;

    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public partial class T4CSharpCodeGenerator : T4CSharpCodeGeneratorBase
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: "));
            Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(EnvironmentVersion) ? EnvironmentVersion : Environment.Version.ToString()));
            Write(this.ToStringHelper.ToStringWithCulture(@"
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace "));
            Write(this.ToStringHelper.ToStringWithCulture(TemplateNamespace));
            Write(this.ToStringHelper.ToStringWithCulture(@"
{
"));
            
            RenderChildTemplate(null, Model.OfType<INamespaceImportToken<TokenParserState>>().DistinctBy(t => t.Namespace).OrderBy(t => t.Namespace), customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            
            RenderChildTemplate(null, this, customResolverDelegate: MainClassTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            if (!TemplateIsOverride)
   {

            
            RenderChildTemplate(null, this, customResolverDelegate: BaseClassTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);

            }

            
            RenderChildTemplate(null, Model.OfType<INamespaceFooterToken<TokenParserState>>(), customResolverDelegate: NamespaceFooterTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            Write(this.ToStringHelper.ToStringWithCulture(@"}"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        protected System.Collections.Generic.IEnumerable<TextTemplateTransformationFramework.Common.Contracts.ITemplateToken<TokenParserState>> _modelField;

        /// <summary>
        /// Access the Model parameter of the template.
        /// </summary>
        [global::System.ComponentModel.Browsable(false)]
        public System.Collections.Generic.IEnumerable<TextTemplateTransformationFramework.Common.Contracts.ITemplateToken<TokenParserState>> Model
        {
            get
            {
                return this._modelField;
            }
        }
        protected System.String _templateNamespaceField;

        /// <summary>
        /// Access the TemplateNamespace parameter of the template.
        /// </summary>
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DefaultValue(@"GeneratedNamespace")]
        public System.String TemplateNamespace
        {
            get
            {
                return this._templateNamespaceField;
            }
        }
        protected System.String _templateClassNameField;

        /// <summary>
        /// Access the TemplateClassName parameter of the template.
        /// </summary>
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DefaultValue(@"GeneratedTemplate")]
        public System.String TemplateClassName
        {
            get
            {
                return this._templateClassNameField;
            }
        }
        protected System.String _generatorNameField;

        /// <summary>
        /// Access the GeneratorName parameter of the template.
        /// </summary>
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DefaultValue(@"TextTemplateTransformationFramework.T4")]
        public System.String GeneratorName
        {
            get
            {
                return this._generatorNameField;
            }
        }
        protected System.String _generatorVersionField;

        /// <summary>
        /// Access the GeneratorVersion parameter of the template.
        /// </summary>
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DefaultValue(@"1.0.0.0")]
        public System.String GeneratorVersion
        {
            get
            {
                return this._generatorVersionField;
            }
        }
        protected System.Boolean _templateIsOverrideField;

        /// <summary>
        /// Access the TemplateIsOverride parameter of the template.
        /// </summary>
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DefaultValue(@"false")]
        public System.Boolean TemplateIsOverride
        {
            get
            {
                return this._templateIsOverrideField;
            }
        }
        protected System.String _cultureCodeField;

        /// <summary>
        /// Access the CultureCode parameter of the template.
        /// </summary>
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DefaultValue(@"en-US")]
        public System.String CultureCode
        {
            get
            {
                return this._cultureCodeField;
            }
        }
        protected System.Boolean _skipInitializationCodeField;

        /// <summary>
        /// Access the SkipInitializationCode parameter of the template.
        /// </summary>
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DefaultValue(@"false")]
        public System.Boolean SkipInitializationCode
        {
            get
            {
                return this._skipInitializationCodeField;
            }
        }
        protected System.String _baseClassInheritsFromField;

        /// <summary>
        /// Access the BaseClassInheritsFrom parameter of the template.
        /// </summary>
        [global::System.ComponentModel.Browsable(false)]
        public System.String BaseClassInheritsFrom
        {
            get
            {
                return this._baseClassInheritsFromField;
            }
        }
        protected System.String _generationEnvironmentAccessorField;

        /// <summary>
        /// Access the GenerationEnvironmentAccessor parameter of the template.
        /// </summary>
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DefaultValue(@"protected")]
        public System.String GenerationEnvironmentAccessor
        {
            get
            {
                return this._generationEnvironmentAccessorField;
            }
        }
        protected System.Boolean _addTemplateLineNumbersField;

        /// <summary>
        /// Access the AddTemplateLineNumbers parameter of the template.
        /// </summary>
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DefaultValue(@"true")]
        public System.Boolean AddTemplateLineNumbers
        {
            get
            {
                return this._addTemplateLineNumbersField;
            }
        }
        protected System.String _environmentVersionField;

        /// <summary>
        /// Access the EnvironmentVersion parameter of the template.
        /// </summary>
        [global::System.ComponentModel.Browsable(false)]
        public System.String EnvironmentVersion
        {
            get
            {
                return this._environmentVersionField;
            }
        }
        protected System.Boolean _addExcludeFromCodeCoverageAttributeField;

        /// <summary>
        /// Access the AddExcludeFromCodeCoverageAttribute parameter of the template.
        /// </summary>
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DefaultValue(@"false")]
        public System.Boolean AddExcludeFromCodeCoverageAttribute
        {
            get
            {
                return this._addExcludeFromCodeCoverageAttributeField;
            }
        }

        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            PlaceholderChildrenDictionary.Clear();
            this.ChildTemplates.Clear();
            this.ViewModels.Clear();
            if (additionalActionDelegate != null)
            {
                additionalActionDelegate();
            }
            RegisterChildTemplate(@"T4CSharpCodeGenerator.BaseClass.Template", () => new T4CSharpCodeGenerator_BaseClass_Template(), typeof(T4CSharpCodeGenerator));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.CodeToken.Template", () => new T4CSharpCodeGenerator_CodeToken_Template(), typeof(ICodeToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.ExcludeFromCodeCoverageAttribute.Template", () => new T4CSharpCodeGenerator_ExcludeFromCodeCoverageAttribute_Template(), typeof(T4CSharpCodeGenerator));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.ExpressionToken.Template", () => new T4CSharpCodeGenerator_ExpressionToken_Template(), typeof(IExpressionToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.GeneratedCodeAttribute.Template", () => new T4CSharpCodeGenerator_GeneratedCodeAttribute_Template(), typeof(GeneratorModel));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.LineNumber.Footer.Template", () => new T4CSharpCodeGenerator_LineNumber_Footer_Template());
            RegisterChildTemplate(@"T4CSharpCodeGenerator.LineNumber.Header.Template", () => new T4CSharpCodeGenerator_LineNumber_Header_Template());
            RegisterChildTemplate(@"T4CSharpCodeGenerator.MainClass.Template", () => new T4CSharpCodeGenerator_MainClass_Template(), typeof(T4CSharpCodeGenerator));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.NamespaceImportToken.Template", () => new T4CSharpCodeGenerator_NamespaceImportToken_Template(), typeof(INamespaceImportToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.ParameterToken.Declaration.Template", () => new T4CSharpCodeGenerator_ParameterToken_Declaration_Template(), typeof(IParameterToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.ParameterToken.Initialization.Template", () => new T4CSharpCodeGenerator_ParameterToken_Initialization_Template(), typeof(IParameterToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.TextToken.Template", () => new T4CSharpCodeGenerator_TextToken_Template(), typeof(ITextToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.ToStringInstanceHelper.Template", () => new T4CSharpCodeGenerator_ToStringInstanceHelper_Template(), typeof(T4CSharpCodeGenerator));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.ClassFooterTokens.ClassFooterCodeToken.Template", () => new T4CSharpCodeGenerator_ClassFooterTokens_ClassFooterCodeToken_Template(), typeof(IClassFooterCodeToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.ClassFooterTokens.ClassFooterErrorToken.Template", () => new T4CSharpCodeGenerator_ClassFooterTokens_ClassFooterErrorToken_Template(), typeof(IClassFooterErrorToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.ClassFooterTokens.ClassFooterExpressionToken.Template", () => new T4CSharpCodeGenerator_ClassFooterTokens_ClassFooterExpressionToken_Template(), typeof(IClassFooterExpressionToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.ClassFooterTokens.ClassFooterTextToken.Template", () => new T4CSharpCodeGenerator_ClassFooterTokens_ClassFooterTextToken_Template(), typeof(IClassFooterTextToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.ClassFooterTokens.ClassFooterWarningToken.Template", () => new T4CSharpCodeGenerator_ClassFooterTokens_ClassFooterWarningToken_Template(), typeof(IClassFooterWarningToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.InitializeTokens.InitializeCodeToken.Template", () => new T4CSharpCodeGenerator_InitializeTokens_InitializeCodeToken_Template(), typeof(IInitializeCodeToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.InitializeTokens.InitializeErrorToken.Template", () => new T4CSharpCodeGenerator_InitializeTokens_InitializeErrorToken_Template(), typeof(IInitializeErrorToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.InitializeTokens.InitializeExpressionToken.Template", () => new T4CSharpCodeGenerator_InitializeTokens_InitializeExpressionToken_Template(), typeof(IInitializeExpressionToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.InitializeTokens.InitializeTextToken.Template", () => new T4CSharpCodeGenerator_InitializeTokens_InitializeTextToken_Template(), typeof(IInitializeTextToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.InitializeTokens.InitializeWarningToken.Template", () => new T4CSharpCodeGenerator_InitializeTokens_InitializeWarningToken_Template(), typeof(IInitializeWarningToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.MessageTokens.ErrorToken.Template", () => new T4CSharpCodeGenerator_MessageTokens_ErrorToken_Template(), typeof(IErrorToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.MessageTokens.WarningToken.Template", () => new T4CSharpCodeGenerator_MessageTokens_WarningToken_Template(), typeof(IWarningToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.NamespaceFooterTokens.NamespaceFooterCodeToken.Template", () => new T4CSharpCodeGenerator_NamespaceFooterTokens_NamespaceFooterCodeToken_Template(), typeof(INamespaceFooterCodeToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.NamespaceFooterTokens.NamespaceFooterErrorToken.Template", () => new T4CSharpCodeGenerator_NamespaceFooterTokens_NamespaceFooterErrorToken_Template(), typeof(INamespaceFooterErrorToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.NamespaceFooterTokens.NamespaceFooterExpressionToken.Template", () => new T4CSharpCodeGenerator_NamespaceFooterTokens_NamespaceFooterExpressionToken_Template(), typeof(INamespaceFooterExpressionToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.NamespaceFooterTokens.NamespaceFooterTextToken.Template", () => new T4CSharpCodeGenerator_NamespaceFooterTokens_NamespaceFooterTextToken_Template(), typeof(INamespaceFooterTextToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.NamespaceFooterTokens.NamespaceFooterWarningToken.Template", () => new T4CSharpCodeGenerator_NamespaceFooterTokens_NamespaceFooterWarningToken_Template(), typeof(INamespaceFooterWarningToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.RenderTokens.RenderCodeToken.Template", () => new T4CSharpCodeGenerator_RenderTokens_RenderCodeToken_Template(), typeof(IRenderCodeToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.RenderTokens.RenderErrorToken.Template", () => new T4CSharpCodeGenerator_RenderTokens_RenderErrorToken_Template(), typeof(IRenderErrorToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.RenderTokens.RenderExpressionToken.Template", () => new T4CSharpCodeGenerator_RenderTokens_RenderExpressionToken_Template(), typeof(IRenderExpressionToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.RenderTokens.RenderTextToken.Template", () => new T4CSharpCodeGenerator_RenderTokens_RenderTextToken_Template(), typeof(IRenderTextToken<TokenParserState>));
            RegisterChildTemplate(@"T4CSharpCodeGenerator.RenderTokens.RenderWarningToken.Template", () => new T4CSharpCodeGenerator_RenderTokens_RenderWarningToken_Template(), typeof(IRenderWarningToken<TokenParserState>));
            RegisterViewModel(@"T4CSharpCodeGenerator.MainClass.ViewModel", () => new T4CSharpCodeGenerator_MainClass_ViewModel(), typeof(T4CSharpCodeGenerator));
            if (this.Session != null && this.Session.ContainsKey("Model") && this.Session["Model"] != null)
            {
                if ((typeof(System.Collections.Generic.IEnumerable<TextTemplateTransformationFramework.Common.Contracts.ITemplateToken<TokenParserState>>).IsAssignableFrom(this.Session["Model"].GetType()) == false))
                {
                    this.Error("The type \'System.Collections.Generic.IEnumerable<TextTemplateTransformationFramework.Common.Contracts.ITemplateToken<TokenParserState>>\' of the parameter \'Model\' did not match the type of the data passed to the template.");
                }
                else
                {
                    this._modelField = ((System.Collections.Generic.IEnumerable<TextTemplateTransformationFramework.Common.Contracts.ITemplateToken<TokenParserState>>)(this.Session["Model"]));
                }
            }
            bool templateNamespaceValueAcquired = false;
            if (this.Session != null && this.Session.ContainsKey("TemplateNamespace") && this.Session["TemplateNamespace"] != null)
            {
                if ((typeof(System.String).IsAssignableFrom(this.Session["TemplateNamespace"].GetType()) == false))
                {
                    this.Error("The type \'System.String\' of the parameter \'TemplateNamespace\' did not match the type of the data passed to the template.");
                }
                else
                {
                    this._templateNamespaceField = ((System.String)(this.Session["TemplateNamespace"]));
                    templateNamespaceValueAcquired = true;
                }
            }
            if ((templateNamespaceValueAcquired == false))
            {
                this._templateNamespaceField = @"GeneratedNamespace";
                templateNamespaceValueAcquired = true;
            }
            bool templateClassNameValueAcquired = false;
            if (this.Session != null && this.Session.ContainsKey("TemplateClassName") && this.Session["TemplateClassName"] != null)
            {
                if ((typeof(System.String).IsAssignableFrom(this.Session["TemplateClassName"].GetType()) == false))
                {
                    this.Error("The type \'System.String\' of the parameter \'TemplateClassName\' did not match the type of the data passed to the template.");
                }
                else
                {
                    this._templateClassNameField = ((System.String)(this.Session["TemplateClassName"]));
                    templateClassNameValueAcquired = true;
                }
            }
            if ((templateClassNameValueAcquired == false))
            {
                this._templateClassNameField = @"GeneratedTemplate";
                templateClassNameValueAcquired = true;
            }
            bool generatorNameValueAcquired = false;
            if (this.Session != null && this.Session.ContainsKey("GeneratorName") && this.Session["GeneratorName"] != null)
            {
                if ((typeof(System.String).IsAssignableFrom(this.Session["GeneratorName"].GetType()) == false))
                {
                    this.Error("The type \'System.String\' of the parameter \'GeneratorName\' did not match the type of the data passed to the template.");
                }
                else
                {
                    this._generatorNameField = ((System.String)(this.Session["GeneratorName"]));
                    generatorNameValueAcquired = true;
                }
            }
            if ((generatorNameValueAcquired == false))
            {
                this._generatorNameField = @"TextTemplateTransformationFramework.T4";
                generatorNameValueAcquired = true;
            }
            bool generatorVersionValueAcquired = false;
            if (this.Session != null && this.Session.ContainsKey("GeneratorVersion") && this.Session["GeneratorVersion"] != null)
            {
                if ((typeof(System.String).IsAssignableFrom(this.Session["GeneratorVersion"].GetType()) == false))
                {
                    this.Error("The type \'System.String\' of the parameter \'GeneratorVersion\' did not match the type of the data passed to the template.");
                }
                else
                {
                    this._generatorVersionField = ((System.String)(this.Session["GeneratorVersion"]));
                    generatorVersionValueAcquired = true;
                }
            }
            if ((generatorVersionValueAcquired == false))
            {
                this._generatorVersionField = @"1.0.0.0";
                generatorVersionValueAcquired = true;
            }
            bool templateIsOverrideValueAcquired = false;
            if (this.Session != null && this.Session.ContainsKey("TemplateIsOverride") && this.Session["TemplateIsOverride"] != null)
            {
                if ((typeof(System.Boolean).IsAssignableFrom(this.Session["TemplateIsOverride"].GetType()) == false))
                {
                    this.Error("The type \'System.Boolean\' of the parameter \'TemplateIsOverride\' did not match the type of the data passed to the template.");
                }
                else
                {
                    this._templateIsOverrideField = ((System.Boolean)(this.Session["TemplateIsOverride"]));
                    templateIsOverrideValueAcquired = true;
                }
            }
            if ((templateIsOverrideValueAcquired == false))
            {
                this._templateIsOverrideField = false;
                templateIsOverrideValueAcquired = true;
            }
            bool cultureCodeValueAcquired = false;
            if (this.Session != null && this.Session.ContainsKey("CultureCode") && this.Session["CultureCode"] != null)
            {
                if ((typeof(System.String).IsAssignableFrom(this.Session["CultureCode"].GetType()) == false))
                {
                    this.Error("The type \'System.String\' of the parameter \'CultureCode\' did not match the type of the data passed to the template.");
                }
                else
                {
                    this._cultureCodeField = ((System.String)(this.Session["CultureCode"]));
                    cultureCodeValueAcquired = true;
                }
            }
            if ((cultureCodeValueAcquired == false))
            {
                this._cultureCodeField = @"en-US";
                cultureCodeValueAcquired = true;
            }
            bool skipInitializationCodeValueAcquired = false;
            if (this.Session != null && this.Session.ContainsKey("SkipInitializationCode") && this.Session["SkipInitializationCode"] != null)
            {
                if ((typeof(System.Boolean).IsAssignableFrom(this.Session["SkipInitializationCode"].GetType()) == false))
                {
                    this.Error("The type \'System.Boolean\' of the parameter \'SkipInitializationCode\' did not match the type of the data passed to the template.");
                }
                else
                {
                    this._skipInitializationCodeField = ((System.Boolean)(this.Session["SkipInitializationCode"]));
                    skipInitializationCodeValueAcquired = true;
                }
            }
            if ((skipInitializationCodeValueAcquired == false))
            {
                this._skipInitializationCodeField = false;
                skipInitializationCodeValueAcquired = true;
            }
            bool baseClassInheritsFromValueAcquired = false;
            if (this.Session != null && this.Session.ContainsKey("BaseClassInheritsFrom") && this.Session["BaseClassInheritsFrom"] != null)
            {
                if ((typeof(System.String).IsAssignableFrom(this.Session["BaseClassInheritsFrom"].GetType()) == false))
                {
                    this.Error("The type \'System.String\' of the parameter \'BaseClassInheritsFrom\' did not match the type of the data passed to the template.");
                }
                else
                {
                    this._baseClassInheritsFromField = ((System.String)(this.Session["BaseClassInheritsFrom"]));
                    baseClassInheritsFromValueAcquired = true;
                }
            }
            if ((baseClassInheritsFromValueAcquired == false))
            {
                this._baseClassInheritsFromField = default(System.String);
                baseClassInheritsFromValueAcquired = true;
            }
            bool generationEnvironmentAccessorValueAcquired = false;
            if (this.Session != null && this.Session.ContainsKey("GenerationEnvironmentAccessor") && this.Session["GenerationEnvironmentAccessor"] != null)
            {
                if ((typeof(System.String).IsAssignableFrom(this.Session["GenerationEnvironmentAccessor"].GetType()) == false))
                {
                    this.Error("The type \'System.String\' of the parameter \'GenerationEnvironmentAccessor\' did not match the type of the data passed to the template.");
                }
                else
                {
                    this._generationEnvironmentAccessorField = ((System.String)(this.Session["GenerationEnvironmentAccessor"]));
                    generationEnvironmentAccessorValueAcquired = true;
                }
            }
            if ((generationEnvironmentAccessorValueAcquired == false))
            {
                this._generationEnvironmentAccessorField = @"protected";
                generationEnvironmentAccessorValueAcquired = true;
            }
            bool addTemplateLineNumbersValueAcquired = false;
            if (this.Session != null && this.Session.ContainsKey("AddTemplateLineNumbers") && this.Session["AddTemplateLineNumbers"] != null)
            {
                if ((typeof(System.Boolean).IsAssignableFrom(this.Session["AddTemplateLineNumbers"].GetType()) == false))
                {
                    this.Error("The type \'System.Boolean\' of the parameter \'AddTemplateLineNumbers\' did not match the type of the data passed to the template.");
                }
                else
                {
                    this._addTemplateLineNumbersField = ((System.Boolean)(this.Session["AddTemplateLineNumbers"]));
                    addTemplateLineNumbersValueAcquired = true;
                }
            }
            if ((addTemplateLineNumbersValueAcquired == false))
            {
                this._addTemplateLineNumbersField = true;
                addTemplateLineNumbersValueAcquired = true;
            }
            bool environmentVersionValueAcquired = false;
            if (this.Session != null && this.Session.ContainsKey("EnvironmentVersion") && this.Session["EnvironmentVersion"] != null)
            {
                if ((typeof(System.String).IsAssignableFrom(this.Session["EnvironmentVersion"].GetType()) == false))
                {
                    this.Error("The type \'System.String\' of the parameter \'EnvironmentVersion\' did not match the type of the data passed to the template.");
                }
                else
                {
                    this._environmentVersionField = ((System.String)(this.Session["EnvironmentVersion"]));
                    environmentVersionValueAcquired = true;
                }
            }
            if ((environmentVersionValueAcquired == false))
            {
                this._environmentVersionField = default(System.String);
                environmentVersionValueAcquired = true;
            }
            bool addExcludeFromCodeCoverageAttributeValueAcquired = false;
            if (this.Session != null && this.Session.ContainsKey("AddExcludeFromCodeCoverageAttribute") && this.Session["AddExcludeFromCodeCoverageAttribute"] != null)
            {
                if ((typeof(System.Boolean).IsAssignableFrom(this.Session["AddExcludeFromCodeCoverageAttribute"].GetType()) == false))
                {
                    this.Error("The type \'System.Boolean\' of the parameter \'AddExcludeFromCodeCoverageAttribute\' did not match the type of the data passed to the template.");
                }
                else
                {
                    this._addExcludeFromCodeCoverageAttributeField = ((System.Boolean)(this.Session["AddExcludeFromCodeCoverageAttribute"]));
                    addExcludeFromCodeCoverageAttributeValueAcquired = true;
                }
            }
            if ((addExcludeFromCodeCoverageAttributeValueAcquired == false))
            {
                this._addExcludeFromCodeCoverageAttributeField = false;
                addExcludeFromCodeCoverageAttributeValueAcquired = true;
            }

        }

    }

    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public partial class T4CSharpCodeGeneratorBase : TextTemplateTransformationFramework.Runtime.T4PlusGeneratedTemplateBase
    {

        public virtual bool ParameterTokenDeclarationTemplate(string templateName, string childTemplateName, Type childTemplateModelType, object model)
{
    return childTemplateName == "T4CSharpCodeGenerator.ParameterToken.Declaration.Template";
}

public virtual bool ParameterTokenInitializationTemplate(string templateName, string childTemplateName, Type childTemplateModelType, object model)
{
    return childTemplateName == "T4CSharpCodeGenerator.ParameterToken.Initialization.Template";
}

public virtual bool BaseClassTemplate(string templateName, string childTemplateName, Type childTemplateModelType, object model)
{
    return childTemplateName == "T4CSharpCodeGenerator.BaseClass.Template";
}

public virtual bool MainClassTemplate(string templateName, string childTemplateName, Type childTemplateModelType, object model)
{
    return childTemplateName == "T4CSharpCodeGenerator.MainClass.Template";
}

public virtual bool ToStringInstanceHelperTemplate(string templateName, string childTemplateName, Type childTemplateModelType, object model)
{
    return childTemplateName == "T4CSharpCodeGenerator.ToStringInstanceHelper.Template";
}

public virtual bool RenderTemplate(string templateName, string childTemplateName, Type childTemplateModelType, object model)
{
    return ChildTemplateNameContains("RenderTokens", templateName, childTemplateName, childTemplateModelType, model);
}

public virtual bool InitializeTemplate(string templateName, string childTemplateName, Type childTemplateModelType, object model)
{
    return ChildTemplateNameContains("InitializeTokens", templateName, childTemplateName, childTemplateModelType, model);
}

public virtual bool ClassFooterTemplate(string templateName, string childTemplateName, Type childTemplateModelType, object model)
{
    return ChildTemplateNameContains("ClassFooterTokens", templateName, childTemplateName, childTemplateModelType, model);
}

public virtual bool NamespaceFooterTemplate(string templateName, string childTemplateName, Type childTemplateModelType, object model)
{
    return ChildTemplateNameContains("NamespaceFooterTokens", templateName, childTemplateName, childTemplateModelType, model);
}

public virtual bool BaseClassFooterTemplate(string templateName, string childTemplateName, Type childTemplateModelType, object model)
{
    return ChildTemplateNameContains("BaseClassFooterTokens", templateName, childTemplateName, childTemplateModelType, model);
}

public virtual bool BaseTemplate(string templateName, string childTemplateName, Type childTemplateModelType, object model)
{
    return childTemplateModelType != null
        && childTemplateModelType.IsAssignableFrom(model.GetType())
        && !RenderTemplate(templateName, childTemplateName, childTemplateModelType, model)
	    && !InitializeTemplate(templateName, childTemplateName, childTemplateModelType, model)
	    && !ClassFooterTemplate(templateName, childTemplateName, childTemplateModelType, model)
	    && !NamespaceFooterTemplate(templateName, childTemplateName, childTemplateModelType, model)
	    && !BaseClassFooterTemplate(templateName, childTemplateName, childTemplateModelType, model);
}

protected virtual bool ChildTemplateNameContains(string partialName, string templateName, string childTemplateName, Type childTemplateModelType, object model)
{
    return childTemplateModelType != null
        && childTemplateModelType.IsAssignableFrom(model.GetType())
        && childTemplateName.Contains(partialName);
}

        public virtual void RenderWithHeaderAndFooterIndent12(string templateName, object template, object model, bool renderAsEnumerable, bool silentlyContinueOnError, int? iterationNumber, int? iterationCount)
{
    RenderWithHeaderAndFooterInner(templateName, template, model, renderAsEnumerable, silentlyContinueOnError, iterationNumber, iterationCount, "            ");
}

public virtual void RenderWithHeaderAndFooter(string templateName, object template, object model, bool renderAsEnumerable, bool silentlyContinueOnError, int? iterationNumber, int? iterationCount)
{
    RenderWithHeaderAndFooterInner(templateName, template, model, renderAsEnumerable, silentlyContinueOnError, iterationNumber, iterationCount, string.Empty);
}

protected virtual void RenderWithHeaderAndFooterInner(string templateName, object template, object model, bool renderAsEnumerable, bool silentlyContinueOnError, int? iterationNumber, int? iterationCount, string indent)
{
    var shouldRenderLineNumberAndFooter = ShouldRenderLineNumberAndFooter(template, model, iterationNumber, iterationCount, templateName);
    
    if (shouldRenderLineNumberAndFooter)
    {
        RenderTemplate(new T4CSharpCodeGenerator_LineNumber_Header_Template(), model);
        Write(indent);
    }
    
    RenderTemplate(template, model, iterationNumber, iterationCount, templateName);
    
    if (shouldRenderLineNumberAndFooter)
    {
        RenderTemplate(new T4CSharpCodeGenerator_LineNumber_Footer_Template(), model);
    }
}

protected virtual bool ShouldRenderLineNumberAndFooter(object template, object model, int? iterationNumber = null, int? iterationCount = null, string resolveTemplateName = null)
{
    return
        model is ITemplateToken<TokenParserState>
        && ((ITemplateToken<TokenParserState>)model).SectionContext?.FileName != null
        && !(model is ICodeToken<TokenParserState> && !(template is T4CSharpCodeGenerator_CodeToken_Template))
        && !(model is IExpressionToken<TokenParserState> && !(template is T4CSharpCodeGenerator_ExpressionToken_Template))
        && !(model is ITextToken<TokenParserState>)
		&& !(TemplateContext.RootContext.Template is T4CSharpCodeGenerator && !((T4CSharpCodeGenerator)TemplateContext.RootContext.Template).AddTemplateLineNumbers);
}


    }
    #endregion
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGeneratorBaseChild : T4CSharpCodeGeneratorBase
    {
        public T4CSharpCodeGenerator RootTemplate { get; set; }

        public override void Write(string textToAppend)
        {
            if (RootTemplate != null)
            {
                RootTemplate.Write(textToAppend);
            }
            else
            {
                base.Write(textToAppend);
            }
        }

        public override void WriteLine(string textToAppend)
        {
            if (RootTemplate != null)
            {
                RootTemplate.WriteLine(textToAppend);
            }
            else
            {
                base.WriteLine(textToAppend);
            }
        }
    }
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    public class GeneratorModel
    {
        public GeneratorModel(string generatorName, string generatorVersion)
        {
            GeneratorName = generatorName;
            GeneratorVersion = generatorVersion;
        }
        public string GeneratorName { get; private set; }
        public string GeneratorVersion { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_BaseClass_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
"));
            
            RenderChildTemplate(@"T4CSharpCodeGenerator.GeneratedCodeAttribute.Template", new GeneratorModel(Model.GeneratorName, Model.GeneratorVersion), customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);

            
            RenderChildTemplate(@"T4CSharpCodeGenerator.ExcludeFromCodeCoverageAttribute.Template", Model, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);

            Write(this.ToStringHelper.ToStringWithCulture(@"    public partial class "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.TemplateClassName));
            Write(this.ToStringHelper.ToStringWithCulture(@"Base"));
            if (!string.IsNullOrEmpty(Model.BaseClassInheritsFrom)) {

            Write(this.ToStringHelper.ToStringWithCulture(@" : "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.BaseClassInheritsFrom));
            } WriteLine("");

            Write(this.ToStringHelper.ToStringWithCulture(@"    {
"));
            if (!Model.SkipInitializationCode)
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"        #region CompilerError
        public class CompilerError
        {
            public CompilerError(int column, string errorNumber, string errorText, string fileName, bool isWarning, int line)
            {
                Column = column;
                ErrorNumber = errorNumber;
                ErrorText = errorText;
                FileName = fileName;
                IsWarning = isWarning;
                Line = line;
            }

            public int Column { get; private set; }
            public string ErrorNumber { get; private set; }
            public string ErrorText { get; private set; }
            public string FileName { get; private set; }
            public bool IsWarning { get; private set; }
            public int Line { get; private set; }

            public override string ToString()
            {
                return string.Format(""{0}({1},{2}): {3}{4}: {5}""
                    , FileName
                    , Line
                    , Column
                    , IsWarning
                        ? ""warning""
                        : ""error""
                    , string.IsNullOrEmpty(ErrorNumber)
                        ? string.Empty
                        : "" "" + ErrorNumber
                    , ErrorText);
            }
        }
        #endregion
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.Collections.Generic.List<CompilerError> errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = """";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.GenerationEnvironmentAccessor));
            Write(this.ToStringHelper.ToStringWithCulture(@" System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.Collections.Generic.List<CompilerError> Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.Collections.Generic.List<CompilerError>();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public virtual void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is """", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public virtual void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            CompilerError error = new CompilerError(1, ""TemplateError"", message, ""T4GeneratedTemplateBase.cs"", false, 1);
            Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            CompilerError error = new CompilerError(1, ""TemplateWarning"", message, ""T4GeneratedTemplateBase.cs"", true, 1);
            Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException(""indent"");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = """";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = """";
        }
        #endregion
"));
            
            RenderChildTemplate(null, Model, customResolverDelegate: ToStringInstanceHelperTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            
            RenderChildTemplate(null, Model.Model.OfType<IBaseClassFooterToken<TokenParserState>>(), customResolverDelegate: BaseClassFooterTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            Write(this.ToStringHelper.ToStringWithCulture(@"    }
    #endregion
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public T4CSharpCodeGenerator Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_CodeToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(Model.Code));
            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            WriteLine("");


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public ICodeToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_ExcludeFromCodeCoverageAttribute_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            if (Model.AddExcludeFromCodeCoverageAttribute) {

            Write(this.ToStringHelper.ToStringWithCulture(@"    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
"));
            }


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public T4CSharpCodeGenerator Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_ExpressionToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"Write(this.ToStringHelper.ToStringWithCulture("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Expression));
            Write(this.ToStringHelper.ToStringWithCulture(@"));
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IExpressionToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_GeneratedCodeAttribute_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"    [System.CodeDom.Compiler.GeneratedCodeAttribute("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratorName.CsharpFormat()));
            Write(this.ToStringHelper.ToStringWithCulture(@", "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.GeneratorVersion.CsharpFormat()));
            Write(this.ToStringHelper.ToStringWithCulture(@")]
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public GeneratorModel Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_LineNumber_Footer_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            Write(this.ToStringHelper.ToStringWithCulture(@"            #line default
            #line hidden
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }


    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_LineNumber_Header_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"#line "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.SectionContext.LineNumber));
            Write(this.ToStringHelper.ToStringWithCulture(@" """));
            Write(this.ToStringHelper.ToStringWithCulture(Model.SectionContext.FileName));
            Write(this.ToStringHelper.ToStringWithCulture(@"""
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public ITemplateToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_MainClass_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            
            RenderChildTemplate(@"T4CSharpCodeGenerator.GeneratedCodeAttribute.Template", new GeneratorModel(Model.GeneratorName, Model.GeneratorVersion), customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);

            Write(this.ToStringHelper.ToStringWithCulture(@"    public partial class "));
            Write(this.ToStringHelper.ToStringWithCulture(ViewModel.ClassName));
            Write(this.ToStringHelper.ToStringWithCulture(@" : "));
            Write(this.ToStringHelper.ToStringWithCulture(ViewModel.BaseClass));
            WriteLine("");

            Write(this.ToStringHelper.ToStringWithCulture(@"    {
        public virtual string TransformText()
        {
"));
            
            RenderChildTemplate(null, ViewModel.RenderTokens, customResolverDelegate: Model.RenderTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            Write(this.ToStringHelper.ToStringWithCulture(@"            return this.GenerationEnvironment.ToString();
        }
        
"));
            
            RenderChildTemplate(null, ViewModel.ParameterTokens, customResolverDelegate: Model.ParameterTokenDeclarationTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            Write(this.ToStringHelper.ToStringWithCulture(@"        public virtual void Initialize()
        {
"));
            
            RenderChildTemplate(null, ViewModel.InitializeTokens, customResolverDelegate: Model.InitializeTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);

            
            RenderChildTemplate(null, ViewModel.ParameterTokens, customResolverDelegate: Model.ParameterTokenInitializationTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            Write(this.ToStringHelper.ToStringWithCulture(@"        }
"));
            
            RenderChildTemplate(null, ViewModel.ClassFooterTokens, customResolverDelegate: Model.ClassFooterTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            Write(this.ToStringHelper.ToStringWithCulture(@"    }
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }

        protected T4CSharpCodeGenerator_MainClass_ViewModel _viewModelField;

        /// <summary>
        /// Access the ViewModel parameter of the template.
        /// </summary>
        public T4CSharpCodeGenerator_MainClass_ViewModel ViewModel
        {
            get
            {
                return this._viewModelField;
            }
            set
            {
                 this._viewModelField = value;
            }
        }

        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }
            ViewModel = GetViewModel(@"T4CSharpCodeGenerator.MainClass.ViewModel") as T4CSharpCodeGenerator_MainClass_ViewModel;

        }

        public T4CSharpCodeGenerator Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_NamespaceImportToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"    using "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Namespace));
            Write(this.ToStringHelper.ToStringWithCulture(@";
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public INamespaceImportToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_ParameterToken_Declaration_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"        protected "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.TypeName.FixTypeName()));
            Write(this.ToStringHelper.ToStringWithCulture(@" _"));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            Write(this.ToStringHelper.ToStringWithCulture(@"Field;

        /// <summary>
        /// Access the "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            Write(this.ToStringHelper.ToStringWithCulture(@" parameter of the template.
        /// </summary>
        public "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.TypeName.FixTypeName()));
            Write(this.ToStringHelper.ToStringWithCulture(@" "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            Write(this.ToStringHelper.ToStringWithCulture(@"
        {
            get
            {
                return this._"));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            Write(this.ToStringHelper.ToStringWithCulture(@"Field;
            }
        }
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IParameterToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_ParameterToken_Initialization_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            if (!Model.NetCoreCompatible)
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"            bool "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            Write(this.ToStringHelper.ToStringWithCulture(@"ValueAcquired = false;
"));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@"            if (this.Session != null && this.Session.ContainsKey("""));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            Write(this.ToStringHelper.ToStringWithCulture(@""") && this.Session["""));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            Write(this.ToStringHelper.ToStringWithCulture(@"""] != null)
            {
                if ((typeof("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.TypeName.FixTypeName()));
            Write(this.ToStringHelper.ToStringWithCulture(@").IsAssignableFrom(this.Session["""));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            Write(this.ToStringHelper.ToStringWithCulture(@"""].GetType()) == false))
                {
                    this.Error(""The type \'"));
            Write(this.ToStringHelper.ToStringWithCulture(Model.TypeName.FixTypeName()));
            Write(this.ToStringHelper.ToStringWithCulture(@"\' of the parameter \'"));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            Write(this.ToStringHelper.ToStringWithCulture(@"\' did not match the type of the data passed to the template."");
                }
                else
                {
                    this._"));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            Write(this.ToStringHelper.ToStringWithCulture(@"Field = (("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.TypeName.FixTypeName()));
            Write(this.ToStringHelper.ToStringWithCulture(@")(this.Session["""));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            Write(this.ToStringHelper.ToStringWithCulture(@"""]));
"));
            if (!Model.NetCoreCompatible)
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"                    "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            Write(this.ToStringHelper.ToStringWithCulture(@"ValueAcquired = true;
"));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@"                }
            }
"));
            if (!Model.NetCoreCompatible)
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"            if (("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            Write(this.ToStringHelper.ToStringWithCulture(@"ValueAcquired == false))
            {
                object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("""));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            Write(this.ToStringHelper.ToStringWithCulture(@""");
                if ((data != null))
                {
                    if ((typeof("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.TypeName.FixTypeName()));
            Write(this.ToStringHelper.ToStringWithCulture(@").IsAssignableFrom(data.GetType()) == false))
                    {
                        this.Error(""The type \'"));
            Write(this.ToStringHelper.ToStringWithCulture(Model.TypeName.FixTypeName()));
            Write(this.ToStringHelper.ToStringWithCulture(@"\' of the parameter \'"));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            Write(this.ToStringHelper.ToStringWithCulture(@"\' did not match the type of the data passed to the template."");
                    }
                    else
                    {
                        this._"));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            Write(this.ToStringHelper.ToStringWithCulture(@"Field = (("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.TypeName.FixTypeName()));
            Write(this.ToStringHelper.ToStringWithCulture(@")(data));
                        "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            Write(this.ToStringHelper.ToStringWithCulture(@"ValueAcquired = true;
                    }
                }
            }
"));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IParameterToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_TextToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"Write(this.ToStringHelper.ToStringWithCulture("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Contents.CsharpFormat()));
            Write(this.ToStringHelper.ToStringWithCulture(@"));
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public ITextToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_ToStringInstanceHelper_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            public bool AllowNullExpressions { get; set; }

            private System.IFormatProvider formatProviderField = new global::System.Globalization.CultureInfo("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.CultureCode.CsharpFormat()));
            Write(this.ToStringHelper.ToStringWithCulture(@");
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField;
                }
                set
                {
                    if (value != null)
                    {
                        this.formatProviderField = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if (objectToConvert == null)
                {
                    if (AllowNullExpressions)
                    {
                        return string.Empty;
                    }
                    throw new ArgumentNullException(""objectToConvert"");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod(""ToString"", new System.Type[] { typeof(System.IFormatProvider)});
                if (method == null)
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] { this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
            set
            {
                this.toStringHelperField = value;
            }
        }
        #endregion
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public T4CSharpCodeGenerator Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_ClassFooterTokens_ClassFooterCodeToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"        "));
            
            RenderChildTemplate(null, Model, customResolverDelegate: RootTemplate.BaseTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IClassFooterCodeToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_ClassFooterTokens_ClassFooterErrorToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"        "));
            
            RenderChildTemplate(null, Model, customResolverDelegate: RootTemplate.BaseTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IClassFooterErrorToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_ClassFooterTokens_ClassFooterExpressionToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"        "));
            
            RenderChildTemplate(null, Model, customResolverDelegate: RootTemplate.BaseTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IClassFooterExpressionToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_ClassFooterTokens_ClassFooterTextToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"        "));
            
            RenderChildTemplate(null, Model, customResolverDelegate: RootTemplate.BaseTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IClassFooterTextToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_ClassFooterTokens_ClassFooterWarningToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"        "));
            
            RenderChildTemplate(null, Model, customResolverDelegate: RootTemplate.BaseTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IClassFooterWarningToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_InitializeTokens_InitializeCodeToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            "));
            
            RenderChildTemplate(null, Model, customResolverDelegate: RootTemplate.BaseTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IInitializeCodeToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_InitializeTokens_InitializeErrorToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            "));
            
            RenderChildTemplate(null, Model, customResolverDelegate: RootTemplate.BaseTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IInitializeErrorToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_InitializeTokens_InitializeExpressionToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            "));
            
            RenderChildTemplate(null, Model, customResolverDelegate: RootTemplate.BaseTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IInitializeExpressionToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_InitializeTokens_InitializeTextToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            "));
            
            RenderChildTemplate(null, Model, customResolverDelegate: RootTemplate.BaseTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IInitializeTextToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_InitializeTokens_InitializeWarningToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            "));
            
            RenderChildTemplate(null, Model, customResolverDelegate: RootTemplate.BaseTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IInitializeWarningToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_MessageTokens_ErrorToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"Error("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Message.CsharpFormat()));
            Write(this.ToStringHelper.ToStringWithCulture(@");
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IErrorToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_MessageTokens_WarningToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"Warning("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Message.CsharpFormat()));
            Write(this.ToStringHelper.ToStringWithCulture(@");
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IWarningToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_NamespaceFooterTokens_NamespaceFooterCodeToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"    "));
            
            RenderChildTemplate(null, Model, customResolverDelegate: RootTemplate.BaseTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public INamespaceFooterCodeToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_NamespaceFooterTokens_NamespaceFooterErrorToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"    "));
            
            RenderChildTemplate(null, Model, customResolverDelegate: RootTemplate.BaseTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public INamespaceFooterErrorToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_NamespaceFooterTokens_NamespaceFooterExpressionToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"    "));
            
            RenderChildTemplate(null, Model, customResolverDelegate: RootTemplate.BaseTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public INamespaceFooterExpressionToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_NamespaceFooterTokens_NamespaceFooterTextToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"    "));
            
            RenderChildTemplate(null, Model, customResolverDelegate: RootTemplate.BaseTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public INamespaceFooterTextToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_NamespaceFooterTokens_NamespaceFooterWarningToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"    "));
            
            RenderChildTemplate(null, Model, customResolverDelegate: RootTemplate.BaseTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooter);


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public INamespaceFooterWarningToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_RenderTokens_RenderCodeToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            "));
            
            RenderChildTemplate(null, Model, customResolverDelegate: RootTemplate.BaseTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooterIndent12);


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IRenderCodeToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_RenderTokens_RenderErrorToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            "));
            
            RenderChildTemplate(null, Model, customResolverDelegate: RootTemplate.BaseTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooterIndent12);


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IRenderErrorToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_RenderTokens_RenderExpressionToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            "));
            
            RenderChildTemplate(null, Model, customResolverDelegate: RootTemplate.BaseTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooterIndent12);


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IRenderExpressionToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_RenderTokens_RenderTextToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            "));
            
            RenderChildTemplate(null, Model, customResolverDelegate: RootTemplate.BaseTemplate);


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IRenderTextToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_RenderTokens_RenderWarningToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            "));
            
            RenderChildTemplate(null, Model, customResolverDelegate: RootTemplate.BaseTemplate, customRenderChildTemplateDelegate: RenderWithHeaderAndFooterIndent12);


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IRenderWarningToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGenerator_MainClass_ViewModel
    {
        [global::System.ComponentModel.Browsable(false)]
        public T4CSharpCodeGenerator Model { get; set; }
        public string BaseClass
        {
            get
            {
                var baseClass = Model.Model.OfType<IBaseClassToken<TokenParserState>>().FirstOrDefault()?.BaseClassName;
                return baseClass.WhenNullOrEmpty(Model.TemplateClassName + "Base");
            }
        }
        public string GeneratorName => Model.GeneratorName.CsharpFormat();
        public string GeneratorVersion => Model.GeneratorVersion.CsharpFormat();
        public string ClassName => Model.TemplateClassName;
        public IEnumerable<ITemplateToken<TokenParserState>> RenderTokens => Model.Model.OfType<IRenderToken<TokenParserState>>();
        public IEnumerable<ITemplateToken<TokenParserState>> ParameterTokens => Model.Model.OfType<IParameterToken<TokenParserState>>();
        public IEnumerable<ITemplateToken<TokenParserState>> InitializeTokens => Model.Model.OfType<IInitializeToken<TokenParserState>>();
        public IEnumerable<ITemplateToken<TokenParserState>> ClassFooterTokens => Model.Model.OfType<IClassFooterToken<TokenParserState>>();


    }

}