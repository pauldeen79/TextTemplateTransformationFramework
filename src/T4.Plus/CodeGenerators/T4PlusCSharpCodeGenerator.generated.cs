// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 7.0.5
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace TextTemplateTransformationFramework.T4.Plus.CodeGenerators
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using TextTemplateTransformationFramework.Common.Contracts;
    using TextTemplateTransformationFramework.Common.Contracts.TemplateTokens;
    using TextTemplateTransformationFramework.Common.Contracts.TemplateTokens.BaseClassFooterTokens;
    using TextTemplateTransformationFramework.Common.Extensions;
    using TextTemplateTransformationFramework.Runtime;
    using TextTemplateTransformationFramework.T4.CodeGenerators;
    using TextTemplateTransformationFramework.T4.Plus.Contracts.TemplateTokens;
    using TextTemplateTransformationFramework.T4.Plus.Contracts.TemplateTokens.BaseClassFooterTokens;
    using TextTemplateTransformationFramework.T4.Plus.Contracts.TemplateTokens.ChildTemplateInitializeCodeTokens;
    using TextTemplateTransformationFramework.T4.Plus.Contracts.TemplateTokens.ChildTemplateRenderCodeTokens;
    using TextTemplateTransformationFramework.T4.Plus.Contracts.TemplateTokens.InitializeTokens;
    using TextTemplateTransformationFramework.T4.Plus.Contracts.TemplateTokens.NamespaceFooterTokens;
    using TextTemplateTransformationFramework.T4.Plus.Contracts.TemplateTokens.RenderTokens;
    using TextTemplateTransformationFramework.T4.Plus.Contracts.TemplateTokens.ViewModelClassFooterTokens;
    using TextTemplateTransformationFramework.T4.Plus.Extensions;
    using Utilities.Extensions;

    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public partial class T4PlusCSharpCodeGenerator : T4CSharpCodeGenerator
    {

        protected System.Boolean _enableAdditionalActionDelegateField;

        /// <summary>
        /// Access the EnableAdditionalActionDelegate parameter of the template.
        /// </summary>
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DefaultValue(@"false")]
        public System.Boolean EnableAdditionalActionDelegate
        {
            get
            {
                return this._enableAdditionalActionDelegateField;
            }
        }

        public override void Initialize(global::System.Action additionalActionDelegate = null)
        {
            base.Initialize(additionalActionDelegate);
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.AddTemplateToPlaceholderToken.Template", () => new T4PlusCSharpCodeGenerator_AddTemplateToPlaceholderToken_Template(), typeof(IAddTemplateToPlaceholderToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.ConvertTypeCode.Template", () => new T4PlusCSharpCodeGenerator_ConvertTypeCode_Template());
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.GetRegisteredObjectCode.Template", () => new T4PlusCSharpCodeGenerator_GetRegisteredObjectCode_Template());
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.MainClass.Template", () => new T4PlusCSharpCodeGenerator_MainClass_Template(), typeof(T4CSharpCodeGenerator));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.ParameterToken.Declaration.Template", () => new T4PlusCSharpCodeGenerator_ParameterToken_Declaration_Template(), typeof(T4.Plus.Contracts.TemplateTokens.IParameterToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.ParameterToken.Initialization.Template", () => new T4PlusCSharpCodeGenerator_ParameterToken_Initialization_Template(), typeof(T4.Plus.Contracts.TemplateTokens.IParameterToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.PlaceholderCode.Template", () => new T4PlusCSharpCodeGenerator_PlaceholderCode_Template());
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.RenderChildTemplateCode.Template", () => new T4PlusCSharpCodeGenerator_RenderChildTemplateCode_Template());
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.RenderChildTemplateToken.Template", () => new T4PlusCSharpCodeGenerator_RenderChildTemplateToken_Template(), typeof(IRenderChildTemplateToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.RenderTemplateCode.Template", () => new T4PlusCSharpCodeGenerator_RenderTemplateCode_Template());
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.BaseClassFooterTokens.AddChildTemplateCodeToken.Template", () => new T4PlusCSharpCodeGenerator_BaseClassFooterTokens_AddChildTemplateCodeToken_Template(), typeof(IAddChildTemplateCodeToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.BaseClassFooterTokens.AllowNullExpressionsToken.Template", () => new T4PlusCSharpCodeGenerator_BaseClassFooterTokens_AllowNullExpressionsToken_Template(), typeof(IAllowNullExpressionsToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.BaseClassFooterTokens.BaseClassFooterCodeToken.Template", () => new T4PlusCSharpCodeGenerator_BaseClassFooterTokens_BaseClassFooterCodeToken_Template(), typeof(IBaseClassFooterCodeToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.BaseClassFooterTokens.BaseClassFooterErrorToken.Template", () => new T4PlusCSharpCodeGenerator_BaseClassFooterTokens_BaseClassFooterErrorToken_Template(), typeof(IBaseClassFooterErrorToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.BaseClassFooterTokens.BaseClassFooterExpressionToken.Template", () => new T4PlusCSharpCodeGenerator_BaseClassFooterTokens_BaseClassFooterExpressionToken_Template(), typeof(IBaseClassFooterExpressionToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.BaseClassFooterTokens.BaseClassFooterTextToken.Template", () => new T4PlusCSharpCodeGenerator_BaseClassFooterTokens_BaseClassFooterTextToken_Template(), typeof(IBaseClassFooterTextToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.BaseClassFooterTokens.BaseClassFooterWarningToken.Template", () => new T4PlusCSharpCodeGenerator_BaseClassFooterTokens_BaseClassFooterWarningToken_Template(), typeof(IBaseClassFooterWarningToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.BaseClassFooterTokens.TemplateContextToken.Template", () => new T4PlusCSharpCodeGenerator_BaseClassFooterTokens_TemplateContextToken_Template(), typeof(ITemplateContextFieldToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.ChildTemplateInitializeCodeTokens.InitializeViewModelTokenTemplate", () => new T4PlusCSharpCodeGenerator_ChildTemplateInitializeCodeTokens_InitializeViewModelTokenTemplate(), typeof(IInitializeViewModelToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.ChildTemplateInitializeCodeTokens.RouteChildPlaceholderChildrenDictionaryFieldToRootTemplateToken.Template", () => new T4PlusCSharpCodeGenerator_ChildTemplateInitializeCodeTokens_RouteChildPlaceholderChildrenDictionaryFieldToRootTemplateToken_Template(), typeof(IRouteChildPlaceholderChildrenDictionaryFieldToRootTemplateToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.ChildTemplateInitializeCodeTokens.RouteChildTemplatesFieldToRootTemplateToken.Template", () => new T4PlusCSharpCodeGenerator_ChildTemplateInitializeCodeTokens_RouteChildTemplatesFieldToRootTemplateToken_Template(), typeof(IRouteChildTemplatesFieldToRootTemplateToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.ChildTemplateRenderCodeTokens.TemplateContext.Template", () => new T4PlusCSharpCodeGenerator_ChildTemplateRenderCodeTokens_TemplateContext_Template(), typeof(IInitializeTemplateContextToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.InitializeTokens.CallAdditionalActionDelegateToken.Template", () => new T4PlusCSharpCodeGenerator_InitializeTokens_CallAdditionalActionDelegateToken_Template(), typeof(ICallAdditionalActionDelegateToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.InitializeTokens.ClearChildTemplatesFieldToken.Template", () => new T4PlusCSharpCodeGenerator_InitializeTokens_ClearChildTemplatesFieldToken_Template(), typeof(IClearChildTemplatesFieldToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.InitializeTokens.ClearErrorsToken.Template", () => new T4PlusCSharpCodeGenerator_InitializeTokens_ClearErrorsToken_Template(), typeof(IClearErrorsToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.InitializeTokens.ClearGenerationEnvironmentToken.Template", () => new T4PlusCSharpCodeGenerator_InitializeTokens_ClearGenerationEnvironmentToken_Template(), typeof(IClearGenerationEnvironmentToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.InitializeTokens.ClearPlaceholderTemplatesFieldToken.Template", () => new T4PlusCSharpCodeGenerator_InitializeTokens_ClearPlaceholderTemplatesFieldToken_Template(), typeof(IClearPlaceholderTemplatesFieldToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.InitializeTokens.EnsureSessionInitializedToken.Template", () => new T4PlusCSharpCodeGenerator_InitializeTokens_EnsureSessionInitializedToken_Template(), typeof(IEnsureSessionInitializedToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.InitializeTokens.InitializeAddTemplateToPlaceholderToken.Template", () => new T4PlusCSharpCodeGenerator_InitializeTokens_InitializeAddTemplateToPlaceholderToken_Template(), typeof(IInitializeAddTemplateToPlaceholderToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.InitializeTokens.InitializeBaseToken.Template", () => new T4PlusCSharpCodeGenerator_InitializeTokens_InitializeBaseToken_Template(), typeof(IInitializeBaseToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.InitializeTokens.InitializeViewModelTokenTemplate", () => new T4PlusCSharpCodeGenerator_InitializeTokens_InitializeViewModelTokenTemplate(), typeof(IInitializeViewModelToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.InitializeTokens.RegisterChildTemplateToken.Template", () => new T4PlusCSharpCodeGenerator_InitializeTokens_RegisterChildTemplateToken_Template(), typeof(IRegisterChildTemplateToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.InitializeTokens.RegisterPlaceholderToken.Template", () => new T4PlusCSharpCodeGenerator_InitializeTokens_RegisterPlaceholderToken_Template(), typeof(IRegisterPlaceholderToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.InitializeTokens.RegisterViewModelToken.Template", () => new T4PlusCSharpCodeGenerator_InitializeTokens_RegisterViewModelToken_Template(), typeof(IRegisterViewModelToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.NamespaceFooterTokens.ChildTemplateClassBaseToken.Template", () => new T4PlusCSharpCodeGenerator_NamespaceFooterTokens_ChildTemplateClassBaseToken_Template(), typeof(IChildTemplateClassBaseToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.NamespaceFooterTokens.ChildTemplateClassToken.Template", () => new T4PlusCSharpCodeGenerator_NamespaceFooterTokens_ChildTemplateClassToken_Template(), typeof(IChildTemplateClassToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.NamespaceFooterTokens.ChildViewModelClassToken.Template", () => new T4PlusCSharpCodeGenerator_NamespaceFooterTokens_ChildViewModelClassToken_Template(), typeof(IChildViewModelNamespaceFooterClassToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.NamespaceFooterTokens.PlaceholderClassToken.Template", () => new T4PlusCSharpCodeGenerator_NamespaceFooterTokens_PlaceholderClassToken_Template(), typeof(IPlaceholderClassToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.NamespaceFooterTokens.TemplateContextToken.Template", () => new T4PlusCSharpCodeGenerator_NamespaceFooterTokens_TemplateContextToken_Template(), typeof(ITemplateContextToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.NamespaceFooterTokens.TemplateFileManagerToken.Template", () => new T4PlusCSharpCodeGenerator_NamespaceFooterTokens_TemplateFileManagerToken_Template(), typeof(ITemplateFileManagerToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.RenderTokens.RenderGeneratorAssemblyTokenTemplate", () => new T4PlusCSharpCodeGenerator_RenderTokens_RenderGeneratorAssemblyTokenTemplate(), typeof(IRenderGeneratorAssemblyToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.RenderTokens.RenderRenderChildTemplateTokenTemplate", () => new T4PlusCSharpCodeGenerator_RenderTokens_RenderRenderChildTemplateTokenTemplate(), typeof(IRenderChildTemplateToken<TokenParserState>));
            RegisterChildTemplate(@"T4PlusCSharpCodeGenerator.ViewModelClassFooterTokens.TemplateContextViewModelFieldToken.Template", () => new T4PlusCSharpCodeGenerator_ViewModelClassFooterTokens_TemplateContextViewModelFieldToken_Template(), typeof(ITemplateContextViewModelFieldToken<TokenParserState>));
            RegisterViewModel(@"T4PlusCSharpCodeGenerator.MainClass.ViewModel", () => new T4PlusCSharpCodeGenerator_MainClass_ViewModel());
            RegisterViewModel(@"T4PlusCSharpCodeGenerator.RenderChildTemplateToken.ViewModel", () => new T4PlusCSharpCodeGenerator_RenderChildTemplateToken_ViewModel(), typeof(IRenderChildTemplateToken<TokenParserState>));
            RegisterViewModel(@"T4PlusCSharpCodeGenerator.NamespaceFooterTokens.ChildTemplateClassBaseToken.ViewModel", () => new T4PlusCSharpCodeGenerator_NamespaceFooterTokens_ChildTemplateClassBaseToken_ViewModel());
            RegisterViewModel(@"T4PlusCSharpCodeGenerator.NamespaceFooterTokens.ChildTemplateClassToken.ViewModel", () => new T4PlusCSharpCodeGenerator_NamespaceFooterTokens_ChildTemplateClassToken_ViewModel(), typeof(IChildTemplateClassToken<TokenParserState>));
            RegisterViewModel(@"T4PlusCSharpCodeGenerator.NamespaceFooterTokens.ChildViewModelClassToken.ViewModel", () => new T4PlusCSharpCodeGenerator_NamespaceFooterTokens_ChildViewModelClassToken_ViewModel(), typeof(IChildViewModelNamespaceFooterClassToken<TokenParserState>));
            RegisterViewModel(@"T4PlusCSharpCodeGenerator.NamespaceFooterTokens.PlaceholderClassToken.ViewModel", () => new T4PlusCSharpCodeGenerator_NamespaceFooterTokens_PlaceholderClassToken_ViewModel(), typeof(IPlaceholderClassToken<TokenParserState>));
            bool enableAdditionalActionDelegateValueAcquired = false;
            if (this.Session is not null && this.Session.ContainsKey("EnableAdditionalActionDelegate") && this.Session["EnableAdditionalActionDelegate"] is not null)
            {
                if ((typeof(System.Boolean).IsAssignableFrom(this.Session["EnableAdditionalActionDelegate"].GetType()) == false))
                {
                    this.Error("The type \'System.Boolean\' of the parameter \'EnableAdditionalActionDelegate\' did not match the type of the data passed to the template.");
                }
                else
                {
                    this._enableAdditionalActionDelegateField = ((System.Boolean)(this.Session["EnableAdditionalActionDelegate"]));
                    enableAdditionalActionDelegateValueAcquired = true;
                }
            }
            if ((enableAdditionalActionDelegateValueAcquired == false))
            {
                this._enableAdditionalActionDelegateField = false;
                enableAdditionalActionDelegateValueAcquired = true;
            }

        }
        public override bool ParameterTokenDeclarationTemplate(string templateName, string childTemplateName, Type childTemplateModelType, object model)
        {
            return model is TextTemplateTransformationFramework.T4.Plus.Contracts.TemplateTokens.IParameterToken<TokenParserState>
                ? childTemplateName == "T4PlusCSharpCodeGenerator.ParameterToken.Declaration.Template"
                : base.ParameterTokenDeclarationTemplate(templateName, childTemplateName, childTemplateModelType, model);
        }

        public override bool ParameterTokenInitializationTemplate(string templateName, string childTemplateName, Type childTemplateModelType, object model)
        {
            return model is TextTemplateTransformationFramework.T4.Plus.Contracts.TemplateTokens.IParameterToken<TokenParserState>
                ? childTemplateName == "T4PlusCSharpCodeGenerator.ParameterToken.Initialization.Template"
                : base.ParameterTokenInitializationTemplate(templateName, childTemplateName, childTemplateModelType, model);
        }

        public override bool MainClassTemplate(string templateName, string childTemplateName, Type childTemplateModelType, object model)
        {
            return childTemplateName == "T4PlusCSharpCodeGenerator.MainClass.Template";
        }

        public override bool BaseTemplate(string templateName, string childTemplateName, Type childTemplateModelType, object model)
        {
            return base.BaseTemplate(templateName, childTemplateName, childTemplateModelType, model)
                && !ChildTemplateRenderCodeTemplate(templateName, childTemplateName, childTemplateModelType, model)
                && !ChildTemplateInitializeCodeTemplate(templateName, childTemplateName, childTemplateModelType, model)
        	    && !ViewModelClassFooterTemplate(templateName, childTemplateName, childTemplateModelType, model)
        	    && !ChildTemplateFooterTemplate(templateName, childTemplateName, childTemplateModelType, model)
                && !CompositionRootConstructorCodeTemplate(templateName, childTemplateName, childTemplateModelType, model)
                && !CompositionRootFeatureTemplate(templateName, childTemplateName, childTemplateModelType, model);
        }

        public virtual bool ChildTemplateRenderCodeTemplate(string templateName, string childTemplateName, Type childTemplateModelType, object model)
        {
            return ChildTemplateNameContains("ChildTemplateRenderCodeTokens", templateName, childTemplateName, childTemplateModelType, model);
        }

        public virtual bool ChildTemplateInitializeCodeTemplate(string templateName, string childTemplateName, Type childTemplateModelType, object model)
        {
            return ChildTemplateNameContains("ChildTemplateInitializeCodeTokens", templateName, childTemplateName, childTemplateModelType, model);
        }

        public virtual bool ViewModelClassFooterTemplate(string templateName, string childTemplateName, Type childTemplateModelType, object model)
        {
            return ChildTemplateNameContains("ViewModelClassFooterTokens", templateName, childTemplateName, childTemplateModelType, model);
        }

        public virtual bool ChildTemplateFooterTemplate(string templateName, string childTemplateName, Type childTemplateModelType, object model)
        {
            return ChildTemplateNameContains("ChildTemplateFooterTokens", templateName, childTemplateName, childTemplateModelType, model);
        }

        public virtual bool CompositionRootConstructorCodeTemplate(string templateName, string childTemplateName, Type childTemplateModelType, object model)
        {
            return ChildTemplateNameContains("CompositionRootConstructorTokens", templateName, childTemplateName, childTemplateModelType, model);
        }

        public virtual bool CompositionRootFeatureTemplate(string templateName, string childTemplateName, Type childTemplateModelType, object model)
        {
            return ChildTemplateNameContains("CompositionRootFeatureTokens", templateName, childTemplateName, childTemplateModelType, model);
        }


    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4CSharpCodeGeneratorBaseChild : T4CSharpCodeGeneratorBase
    {
        public T4PlusCSharpCodeGenerator RootTemplate { get; set; }

        public override void Write(string textToAppend)
        {
            if (RootTemplate is not null)
            {
                RootTemplate.Write(textToAppend);
            }
            else
            {
                base.Write(textToAppend);
            }
        }

        public override void WriteLine(string textToAppend)
        {
            if (RootTemplate is not null)
            {
                RootTemplate.WriteLine(textToAppend);
            }
            else
            {
                base.WriteLine(textToAppend);
            }
        }
    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_AddTemplateToPlaceholderToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            WriteLine("");

            Write(this.ToStringHelper.ToStringWithCulture(@"AddTemplateToPlaceholder("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.PlaceholderName.FormatLiteral(Model.PlaceholderNameIsLiteral)));
            Write(this.ToStringHelper.ToStringWithCulture(@", "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.ChildTemplateName.FormatLiteral(Model.ChildTemplateNameIsLiteral)));
            Write(this.ToStringHelper.ToStringWithCulture(@");
"));
            WriteLine("");


            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IAddTemplateToPlaceholderToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_ConvertTypeCode_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"        private static object ConvertType(KeyValuePair<string, object> parameter, Type type)
        {
            var property = type.GetProperty(parameter.Key);

            return property is null
                ? parameter.Value
                : parameter.Value is int && property.PropertyType.IsEnum
                    ? Enum.ToObject(property.PropertyType, parameter.Value)
                    : Convert.ChangeType(parameter.Value, property.PropertyType);
        }
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }


    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_GetRegisteredObjectCode_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"        protected virtual object GetRegisteredObject(List<global::System.Tuple<string, global::System.Func<object>, global::System.Type>> registrations, string objectName, string name, object model, bool silentlyContinueOnError, global::System.Func<string, string, global::System.Type, object, bool> customResolverDelegate, global::System.Action<string> errorDelegate)
        {
            var registrationTuples = customResolverDelegate is not null
                ? registrations.Where(t => customResolverDelegate(name, t.Item1, t.Item3, model))
                : Resolve(registrations, name, model);

            if (!registrationTuples.Any() && customResolverDelegate is null && string.IsNullOrEmpty(name) && model is not null)
            {
                registrationTuples = registrations.Where(t => t.Item3?.IsAssignableFrom(model.GetType()) == true);
            }

            var templateTuplesArray = registrationTuples.ToArray();
            if (templateTuplesArray.Length > 1)
            {
                if (!silentlyContinueOnError)
                {
                    errorDelegate(""Multiple "" + objectName.ToLower() + ""s found with model type "" + (model is null ? ""{null}"" : model.GetType().FullName) + "": "" + string.Join("", "", templateTuplesArray.Select(t => t.Item1)));
                }
                return null;
            }
            else
            {
                var registrationTuple = templateTuplesArray.Length == 1 ? templateTuplesArray[0] : null;
                if (registrationTuple is null)
                {
                    if (string.IsNullOrEmpty(name) && model is not null)
                    {
                        if (!silentlyContinueOnError)
                        {
                            errorDelegate(""Could not resolve "" + objectName.ToLower() + "" with model type "" + model.GetType().FullName);
                        }
                    }
                    else
                    {
                        if (!silentlyContinueOnError)
                        {
                            errorDelegate(""Could not resolve "" + objectName.ToLower() + "" with name "" + name);
                        }
                    }

                    return null;
                }

                var registeredInstance = registrationTuple.Item2();
                if (registeredInstance is null)
                {
                    if (!silentlyContinueOnError)
                    {
                        errorDelegate(objectName + "" ["" + registrationTuple.Item1 + ""] did not instanciate"");
                    }
                    return null;
                }

                return registeredInstance;
            }
        }

        private static global::System.Collections.Generic.IEnumerable<global::System.Tuple<string, global::System.Func<object>, global::System.Type>> Resolve(global::System.Collections.Generic.List<global::System.Tuple<string, global::System.Func<object>, global::System.Type>> registrations, string name, object model)
            => string.IsNullOrEmpty(name) && model is not null
                ? registrations.Where(t => t.Item3 == model.GetType())
                : registrations.Where(t => t.Item1 == name);
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }


    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_MainClass_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            
            RenderChildTemplate(@"T4CSharpCodeGenerator.GeneratedCodeAttribute.Template", new GeneratorModel(Model.GeneratorName, Model.GeneratorVersion), null, false, null, null, new CustomDelegates { RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });

            
            RenderChildTemplate(@"T4CSharpCodeGenerator.ExcludeFromCodeCoverageAttribute.Template", Model, null, false, null, null, new CustomDelegates { RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });

            Write(this.ToStringHelper.ToStringWithCulture(@"    public partial class "));
            Write(this.ToStringHelper.ToStringWithCulture(ViewModel.ClassName));
            Write(this.ToStringHelper.ToStringWithCulture(@" : "));
            Write(this.ToStringHelper.ToStringWithCulture(ViewModel.BaseClass));
            WriteLine("");

            Write(this.ToStringHelper.ToStringWithCulture(@"    {
"));
            if (ViewModel.AddRenderMethod)
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
"));
            
            RenderChildTemplate(null, ViewModel.RenderTokens, null, false, null, null, new CustomDelegates { ResolverDelegate = Model.RenderTemplate, RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            Write(this.ToStringHelper.ToStringWithCulture(@"            if (builder is not null) this.GenerationEnvironment = backup;
        }

"));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            
            RenderChildTemplate(null, ViewModel.ParameterTokens, null, false, null, null, new CustomDelegates { ResolverDelegate = Model.ParameterTokenDeclarationTemplate, RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            Write(this.ToStringHelper.ToStringWithCulture(@"        public "));
            Write(this.ToStringHelper.ToStringWithCulture(ViewModel.InitializeAccessor));
            Write(this.ToStringHelper.ToStringWithCulture(@" void Initialize("));
            if (ViewModel.EnableAdditionalActionDelegate) {

            Write(this.ToStringHelper.ToStringWithCulture(@"global::System.Action additionalActionDelegate = null"));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@")
        {
"));
            
            RenderChildTemplate(null, ViewModel.PreParameterInitializeTokens, null, false, null, null, new CustomDelegates { ResolverDelegate = Model.InitializeTemplate, RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });

            
            RenderChildTemplate(null, ViewModel.ParameterTokens, null, false, null, null, new CustomDelegates { ResolverDelegate = Model.ParameterTokenInitializationTemplate, RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });

            
            RenderChildTemplate(null, ViewModel.PostParameterInitializeTokens, null, false, null, null, new CustomDelegates { ResolverDelegate = Model.InitializeTemplate, RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            Write(this.ToStringHelper.ToStringWithCulture(@"        }
"));
            
            RenderChildTemplate(null, ViewModel.ClassFooterTokens, null, false, null, null, new CustomDelegates { ResolverDelegate = Model.ClassFooterTemplate, RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            Write(this.ToStringHelper.ToStringWithCulture(@"    }
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }

        protected T4PlusCSharpCodeGenerator_MainClass_ViewModel _viewModelField;

        /// <summary>
        /// Access the ViewModel parameter of the template.
        /// </summary>
        public T4PlusCSharpCodeGenerator_MainClass_ViewModel ViewModel
        {
            get
            {
                return this._viewModelField;
            }
            set
            {
                 this._viewModelField = value;
            }
        }

        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }
            ViewModel = GetViewModel(@"T4PlusCSharpCodeGenerator.MainClass.ViewModel") as T4PlusCSharpCodeGenerator_MainClass_ViewModel;

        }

        public T4CSharpCodeGenerator Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_ParameterToken_Declaration_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"        protected "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.TypeName.FixTypeName()));
            Write(this.ToStringHelper.ToStringWithCulture(@" _"));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            Write(this.ToStringHelper.ToStringWithCulture(@"Field;

        /// <summary>
        /// Access the "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            Write(this.ToStringHelper.ToStringWithCulture(@" parameter of the template.
        /// </summary>
"));
            if (!string.IsNullOrEmpty(Model.Category))
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"        [global::System.ComponentModel.Category("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Category.CsharpFormat()));
            Write(this.ToStringHelper.ToStringWithCulture(@")]
"));
            }

            if (!string.IsNullOrEmpty(Model.Description))
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"        [global::System.ComponentModel.Description("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Description.CsharpFormat()));
            Write(this.ToStringHelper.ToStringWithCulture(@")]
"));
            }

            if (!string.IsNullOrEmpty(Model.DisplayName))
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"        [global::System.ComponentModel.DisplayName("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.DisplayName.CsharpFormat()));
            Write(this.ToStringHelper.ToStringWithCulture(@")]
"));
            }

            if (Model.ReadOnly)
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"        [global::System.ComponentModel.ReadOnly(true)]
"));
            }

            if (Model.Required)
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"        [global::System.ComponentModel.DataAnnotations.Required]
"));
            }

            if (!Model.Browsable)
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"        [global::System.ComponentModel.Browsable(false)]
"));
            }

            if (Model.DefaultValue is not null && !Model.OmitValueAssignment)
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"        [global::System.ComponentModel.DefaultValue("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.DefaultValue.CsharpFormat()));
            Write(this.ToStringHelper.ToStringWithCulture(@")]
"));
            }

            if (!string.IsNullOrEmpty(Model.EditorAttributeEditorTypeName) && !string.IsNullOrEmpty(Model.EditorAttributeEditorBaseType))
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"        [global::System.ComponentModel.EditorAttribute("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.EditorAttributeEditorTypeName));
            Write(this.ToStringHelper.ToStringWithCulture(@", "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.EditorAttributeEditorBaseType));
            Write(this.ToStringHelper.ToStringWithCulture(@")]
"));
            }

            if (!string.IsNullOrEmpty(Model.TypeConverterTypeName))
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"        [global::System.ComponentModel.TypeConverter(typeof("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.TypeConverterTypeName));
            Write(this.ToStringHelper.ToStringWithCulture(@"))]
"));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@"        public "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.TypeName.FixTypeName()));
            Write(this.ToStringHelper.ToStringWithCulture(@" "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            Write(this.ToStringHelper.ToStringWithCulture(@"
        {
            get
            {
                return this._"));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            Write(this.ToStringHelper.ToStringWithCulture(@"Field;
            }
"));
            if (Model.AddPropertySetter)
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"            set
            {
                 this._"));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            Write(this.ToStringHelper.ToStringWithCulture(@"Field = value;
            }
"));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@"        }
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public T4.Plus.Contracts.TemplateTokens.IParameterToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_ParameterToken_Initialization_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            if (!Model.OmitInitialization)
   {
       if (!Model.NetCoreCompatible || !Model.OmitValueAssignment)
       {

            Write(this.ToStringHelper.ToStringWithCulture(@"            bool "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            Write(this.ToStringHelper.ToStringWithCulture(@"ValueAcquired = false;
"));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@"            if (this.Session is not null && this.Session.ContainsKey("""));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            Write(this.ToStringHelper.ToStringWithCulture(@""") && this.Session["""));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            Write(this.ToStringHelper.ToStringWithCulture(@"""] is not null)
            {
                if ((typeof("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.TypeName.FixTypeName()));
            Write(this.ToStringHelper.ToStringWithCulture(@").IsAssignableFrom(this.Session["""));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            Write(this.ToStringHelper.ToStringWithCulture(@"""].GetType()) == false))
                {
                    this.Error(""The type \'"));
            Write(this.ToStringHelper.ToStringWithCulture(Model.TypeName.FixTypeName()));
            Write(this.ToStringHelper.ToStringWithCulture(@"\' of the parameter \'"));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            Write(this.ToStringHelper.ToStringWithCulture(@"\' did not match the type of the data passed to the template."");
                }
                else
                {
                    this._"));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            Write(this.ToStringHelper.ToStringWithCulture(@"Field = (("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.TypeName.FixTypeName()));
            Write(this.ToStringHelper.ToStringWithCulture(@")(this.Session["""));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            Write(this.ToStringHelper.ToStringWithCulture(@"""]));
"));
            if (!Model.NetCoreCompatible || !Model.OmitValueAssignment)
       {

            Write(this.ToStringHelper.ToStringWithCulture(@"                    "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            Write(this.ToStringHelper.ToStringWithCulture(@"ValueAcquired = true;
"));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@"                }
            }
"));
            if (!Model.NetCoreCompatible)
       {

            Write(this.ToStringHelper.ToStringWithCulture(@"            if (("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            Write(this.ToStringHelper.ToStringWithCulture(@"ValueAcquired == false))
            {
                object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("""));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            Write(this.ToStringHelper.ToStringWithCulture(@""");
                if ((data is not null))
                {
                    if ((typeof("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.TypeName.FixTypeName()));
            Write(this.ToStringHelper.ToStringWithCulture(@").IsAssignableFrom(data.GetType()) == false))
                    {
                        this.Error(""The type \'"));
            Write(this.ToStringHelper.ToStringWithCulture(Model.TypeName.FixTypeName()));
            Write(this.ToStringHelper.ToStringWithCulture(@"\' of the parameter \'"));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            Write(this.ToStringHelper.ToStringWithCulture(@"\' did not match the type of the data passed to the template."");
                    }
                    else
                    {
                        this._"));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            Write(this.ToStringHelper.ToStringWithCulture(@"Field = (("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.TypeName.FixTypeName()));
            Write(this.ToStringHelper.ToStringWithCulture(@")(data));
                        "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            Write(this.ToStringHelper.ToStringWithCulture(@"ValueAcquired = true;
                    }
                }
            }
"));
            }
       if (!Model.OmitValueAssignment)
       {

            Write(this.ToStringHelper.ToStringWithCulture(@"            if (("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            Write(this.ToStringHelper.ToStringWithCulture(@"ValueAcquired == false))
            {
"));
            if (Model.DefaultValue is not null)
       {

            Write(this.ToStringHelper.ToStringWithCulture(@"                this._"));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            Write(this.ToStringHelper.ToStringWithCulture(@"Field = "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.DefaultValue.FormatLiteral(Model.DefaultValueIsLiteral)));
            Write(this.ToStringHelper.ToStringWithCulture(@";
"));
            }
       else
       {

            Write(this.ToStringHelper.ToStringWithCulture(@"                this._"));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            Write(this.ToStringHelper.ToStringWithCulture(@"Field = default("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.TypeName.FixTypeName()));
            Write(this.ToStringHelper.ToStringWithCulture(@");
"));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@"                "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            Write(this.ToStringHelper.ToStringWithCulture(@"ValueAcquired = true;
            }
"));
            }
   }


            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public T4.Plus.Contracts.TemplateTokens.IParameterToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_PlaceholderCode_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"        public void ClearPlaceholder(string placeholderName)
        {
            PerformActionOnPlaceholder(placeholderName, (val) => val.Clear());
        }

        public void AddTemplateToPlaceholder(string placeholderName, string templateName, object model = null, bool silentlyContinueOnError = false, Func<string, string, Type, object, bool> customResolverDelegate = null)
        {
            PerformActionOnPlaceholder(placeholderName, (val) =>
                {
                    var childTemplate = GetChildTemplate(templateName, model, silentlyContinueOnError, customResolverDelegate);
                    if (childTemplate is not null)
                    {
                        val.Add(childTemplate);
                    }
                });
        }

        protected global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.IList<object>> _placeholderChildrenDictionaryField = new global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.IList<object>>();
        public global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.IList<object>> PlaceholderChildrenDictionary { get { return _placeholderChildrenDictionaryField; } protected set { _placeholderChildrenDictionaryField = value; } }
        protected void PerformActionOnPlaceholder(string placeholderName, Action<global::System.Collections.Generic.IList<object>> placeholderAction)
        {
            if (!PlaceholderChildrenDictionary.ContainsKey(placeholderName))
            {
                PlaceholderChildrenDictionary.Add(placeholderName, new global::System.Collections.Generic.List<object>());
            }

            var childrenList = PlaceholderChildrenDictionary[placeholderName];
            placeholderAction(childrenList);
        }
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }


    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_RenderChildTemplateCode_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"        public void RenderChildTemplate(string templateName, object model = null, bool? renderAsEnumerable = null, bool silentlyContinueOnError = false, string separatorTemplateName = null, Func<string, string, Type, object, bool> customResolverDelegate = null, object resolverDelegateModel = null, Action<string, object, object, bool, bool, int?, int?> customRenderChildTemplateDelegate = null, Func<object, string> customTemplateNameDelegate = null)
        {
            if (renderAsEnumerable is null)
            {
                renderAsEnumerable = model is global::System.Collections.IEnumerable && !(model is string);
            }
            if (renderAsEnumerable == true && model is not null && model is global::System.Collections.IEnumerable)
            {
                var items = ((global::System.Collections.IEnumerable)model).OfType<object>().ToArray();
                var iterationCount = items.Length;
                var iterationNumber = 0;
                var originalTemplateName = templateName;
                foreach (var item in items)
                {
                    if (customTemplateNameDelegate is not null)
                    {
                        var customTemplateName = customTemplateNameDelegate(item);
                        if (!string.IsNullOrEmpty(customTemplateName))
                        {
                            templateName = customTemplateName;
                        }
                        else
                        {
                            templateName = originalTemplateName;
                        }
                    }
                    var template = GetChildTemplate(templateName, resolverDelegateModel ?? item, silentlyContinueOnError, customResolverDelegate);
                    if (template is not null)
                    {
                        if (customRenderChildTemplateDelegate is not null)
                        {
                            customRenderChildTemplateDelegate.Invoke(templateName, template, item, renderAsEnumerable.Value, silentlyContinueOnError, iterationNumber, iterationCount);
                        }
                        else
                        {
                            RenderTemplate(template, item, iterationNumber, iterationCount);
                        }
                    }
                    if (iterationNumber + 1 < iterationCount && !string.IsNullOrEmpty(separatorTemplateName))
                    {
                        var separatorTemplate = GetChildTemplate(separatorTemplateName, resolverDelegateModel ?? model, silentlyContinueOnError, customResolverDelegate);
                        if (separatorTemplate is not null)
                        {
                            if (customRenderChildTemplateDelegate is not null)
                            {
                                customRenderChildTemplateDelegate.Invoke(separatorTemplateName, separatorTemplate, item, renderAsEnumerable.Value, silentlyContinueOnError, iterationNumber, iterationCount);
                            }
                            else
                            {
                                RenderTemplate(separatorTemplate, item, iterationNumber, iterationCount);
                            }
                        }
                    }
                    iterationNumber++;
                }
            }
            else
            {
                if (customTemplateNameDelegate is not null)
                {
                    var customTemplateName = customTemplateNameDelegate(model);
                    if (!string.IsNullOrEmpty(customTemplateName))
                    {
                        templateName = customTemplateName;
                    }
                }
                var template = GetChildTemplate(templateName, resolverDelegateModel ?? model, silentlyContinueOnError, customResolverDelegate);
                if (template is not null)
                {
                    if (customRenderChildTemplateDelegate is not null)
                    {
                        customRenderChildTemplateDelegate.Invoke(templateName, template, model, renderAsEnumerable.Value, silentlyContinueOnError, null, null);
                    }
                    else
                    {
                        RenderTemplate(template, model, null, null);
                    }
                }
            }
        }
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }


    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_RenderChildTemplateToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            WriteLine("");

            Write(this.ToStringHelper.ToStringWithCulture(@"            RenderChildTemplate("));
            Write(this.ToStringHelper.ToStringWithCulture(ViewModel.Name));
            Write(this.ToStringHelper.ToStringWithCulture(string.Concat(ViewModel.Arguments)));
            Write(this.ToStringHelper.ToStringWithCulture(@");
"));
            WriteLine("");


            if (builder is not null) this.GenerationEnvironment = backup;
        }

        protected T4PlusCSharpCodeGenerator_RenderChildTemplateToken_ViewModel _viewModelField;

        /// <summary>
        /// Access the ViewModel parameter of the template.
        /// </summary>
        public T4PlusCSharpCodeGenerator_RenderChildTemplateToken_ViewModel ViewModel
        {
            get
            {
                return this._viewModelField;
            }
            set
            {
                 this._viewModelField = value;
            }
        }

        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }
            ViewModel = GetViewModel(@"T4PlusCSharpCodeGenerator.RenderChildTemplateToken.ViewModel") as T4PlusCSharpCodeGenerator_RenderChildTemplateToken_ViewModel;

        }

        public IRenderChildTemplateToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_RenderTemplateCode_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"        public virtual void RenderTemplate(object template, object model, int? iterationNumber = null, int? iterationCount = null, string resolveTemplateName = null)
        {
            var templateType = template.GetType();

            var childRootTemplateProperty = templateType.GetProperty(""RootTemplate"");
            if (childRootTemplateProperty is not null && childRootTemplateProperty.GetSetMethod() is not null)
            {
                var currentTemplateRootTemplate = this.GetType().GetProperty(""RootTemplate"");
                var rootTemplate = currentTemplateRootTemplate is null
                    ? this
                    : currentTemplateRootTemplate.GetValue(this, null);
                childRootTemplateProperty.SetValue(template, rootTemplate, null);
            }

"));
            
            RenderChildTemplate(null, RootTemplate.Model.OfType<IChildTemplateRenderCodeToken<TokenParserState>>(), null, false, null, null, new CustomDelegates { ResolverDelegate = ((T4PlusCSharpCodeGenerator)RootTemplate).ChildTemplateRenderCodeTemplate, RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            Write(this.ToStringHelper.ToStringWithCulture(@"            var modelProperty = model is null ? null : templateType.GetProperty(""Model"");
            if (modelProperty is not null)
            {
                modelProperty.SetValue(template, model, null);
            }

            var initializeMethod = templateType.GetMethod(""Initialize"");
            if (initializeMethod is not null)
            {
                initializeMethod.Invoke(template, initializeMethod.GetParameters().Length == 0 ? new object[0] : new object[] { null });
            }

            var viewModelProperty = templateType.GetProperty(""ViewModel"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            if (viewModelProperty is not null)
            {
                var viewModelValue = viewModelProperty.GetValue(template);
                if (viewModelValue is null)
                {
                    viewModelValue = Activator.CreateInstance(viewModelProperty.PropertyType);
                    viewModelProperty.SetValue(template, viewModelValue);
                }

                var viewModelValueType = viewModelValue.GetType();
                foreach (var kvp in Session.Where(kvp => kvp.Key != ""Model""))
                {
                    var prop = viewModelValueType.GetProperty(kvp.Key);
                    if (prop is not null)
                    {
                        if (prop.GetSetMethod() is null) { continue; }
                        prop.SetValue(viewModelValue, ConvertType(kvp, viewModelValueType));
                    }
                }

                var modelProp = viewModelValueType.GetProperty(""Model"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                if (modelProp is not null)
                {
                    modelProp.SetValue(viewModelValue, model);
                }

                var viewModelRootTemplateProp = viewModelValueType.GetProperty(""RootTemplate"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
                var templateRootTemplateProp = templateType.GetProperty(""RootTemplate"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                if (viewModelRootTemplateProp is not null && templateRootTemplateProp is not null && viewModelRootTemplateProp.GetSetMethod() is not null)
                {
                    viewModelRootTemplateProp.SetValue(viewModelValue, templateRootTemplateProp.GetValue(template));
                }

                var templateContextProp = viewModelValueType.GetProperty(""TemplateContext"", System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic);
                var templateContextPropOnTemplate = this.GetType().GetProperty(""TemplateContext"", System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic);
                if (templateContextProp is not null && templateContextPropOnTemplate is not null)
                {
                    templateContextProp.SetValue(viewModelValue, templateContextPropOnTemplate.GetValue(this));
                }
            }

            var toStringHelperProperty = templateType.GetProperty(""ToStringHelper"");
            if (toStringHelperProperty is not null && toStringHelperProperty.GetSetMethod() is not null)
            {
                toStringHelperProperty.SetValue(template, ToStringHelper, null);
            }

            var renderMethod = templateType.GetMethod(""Render"");
            var transformTextMethod = templateType.GetMethod(""TransformText"");
            if (renderMethod is not null)
            {
                renderMethod.Invoke(template, new[] { this.GenerationEnvironment });
            }
            else if (transformTextMethod is not null)
            {
                this.GenerationEnvironment.Append((string)transformTextMethod.Invoke(template, new object[0]));
            }
            else
            {
                var toStringMethod = templateType.GetMethod(""ToString"");
                this.GenerationEnvironment.Append((string)toStringMethod.Invoke(template, new object[0]));
            }

            var errorsProperty = template.GetType().GetProperty(""Errors"");
            if (errorsProperty is not null)
            {
                var errors = errorsProperty.GetValue(template, null) as System.Collections.Generic.List<CompilerError>;
                if (errors is not null)
                {
                    foreach (var error in errors)
                    {
                        if (error.IsWarning)
                        {
                            Warning(error.ErrorText);
                        }
                        else
                        {
                            Error(error.ErrorText);
                        }
                    }
                }
            }
        }
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }


    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_BaseClassFooterTokens_AddChildTemplateCodeToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"        #region Child templates
        private global::System.Collections.Generic.List<global::System.Tuple<string, Func<object>, global::System.Type>> _childTemplatesField = new global::System.Collections.Generic.List<Tuple<string, Func<object>, Type>>();
        public global::System.Collections.Generic.List<global::System.Tuple<string, Func<object>, global::System.Type>> ChildTemplates { get { return _childTemplatesField; } protected set { _childTemplatesField = value; } }
        private global::System.Collections.Generic.List<global::System.Tuple<string, Func<object>, global::System.Type>> _viewModelsField = new global::System.Collections.Generic.List<Tuple<string, Func<object>, Type>>();
        public global::System.Collections.Generic.List<global::System.Tuple<string, Func<object>, global::System.Type>> ViewModels { get { return _viewModelsField; } protected set { _viewModelsField = value; } }
        public global::System.Action<object> ChildTemplateCreated { get; set; }

        public void RegisterChildTemplate(string templateName, Func<object> templateDelegate, Type modelType = null)
        {
            ChildTemplates.Add(new Tuple<string,Func<object>,Type>(templateName, templateDelegate, modelType));
        }

        public void RegisterViewModel(string viewModelName, Func<object> viewModelDelegate, Type modelType = null)
        {
            ViewModels.Add(new Tuple<string,Func<object>,Type>(viewModelName, viewModelDelegate, modelType));
        }

"));
            
            RenderChildTemplate(@"T4PlusCSharpCodeGenerator.PlaceholderCode.Template", null, null, false, null, null, new CustomDelegates { });

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            
            RenderChildTemplate(@"T4PlusCSharpCodeGenerator.RenderTemplateCode.Template", null, null, false, null, null, new CustomDelegates { });

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            
            RenderChildTemplate(@"T4PlusCSharpCodeGenerator.RenderChildTemplateCode.Template", null, null, false, null, null, new CustomDelegates { });

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            Write(this.ToStringHelper.ToStringWithCulture(@"        protected virtual object GetChildTemplate(string templateName, object model = null, bool silentlyContinueOnError = false, Func<string, string, Type, object, bool> customResolverDelegate = null)
        {
            var result = GetRegisteredObject(ChildTemplates, ""Child template"", templateName, model, silentlyContinueOnError, customResolverDelegate);
            if (ChildTemplateCreated is not null)
            {
                ChildTemplateCreated.Invoke(result);
            }
            return result;
        }

        protected virtual object GetViewModel(string viewModelName, object model = null, bool silentlyContinueOnError = false, Func<string, string, Type, object, bool> customResolverDelegate = null)
        {
            var returnValue = GetRegisteredObject(ViewModels, ""View model"", viewModelName, model, silentlyContinueOnError, customResolverDelegate);
            if (returnValue is not null && model is not null)
            {
                var modelProperty = returnValue.GetType().GetProperty(""Model"", System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic);
                modelProperty?.SetValue(returnValue, model);
            }
            return returnValue;
        }

        protected virtual object GetRegisteredObject(List<Tuple<string, Func<object>, Type>> registrations, string objectName, string name, object model = null, bool silentlyContinueOnError = false, Func<string, string, Type, object, bool> customResolverDelegate = null)
        {
            return GetRegisteredObject(registrations, objectName, name, model, silentlyContinueOnError, customResolverDelegate, Error);
        }

"));
            
            RenderChildTemplate(@"T4PlusCSharpCodeGenerator.GetRegisteredObjectCode.Template", null, null, false, null, null, new CustomDelegates { });

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            
            RenderChildTemplate(@"T4PlusCSharpCodeGenerator.ConvertTypeCode.Template", null, null, false, null, null, new CustomDelegates { });

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            Write(this.ToStringHelper.ToStringWithCulture(@"        #endregion
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IAddChildTemplateCodeToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_BaseClassFooterTokens_AllowNullExpressionsToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"        public "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.TemplateClassName));
            Write(this.ToStringHelper.ToStringWithCulture(@"Base()
        {
            ToStringHelper.AllowNullExpressions = true;
        }
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IAllowNullExpressionsToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_BaseClassFooterTokens_BaseClassFooterCodeToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"        "));
            
            RenderChildTemplate(null, Model, null, false, null, null, new CustomDelegates { ResolverDelegate = RootTemplate.BaseTemplate, RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });


            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IBaseClassFooterCodeToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_BaseClassFooterTokens_BaseClassFooterErrorToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"        "));
            
            RenderChildTemplate(null, Model, null, false, null, null, new CustomDelegates { ResolverDelegate = RootTemplate.BaseTemplate, RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });


            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IBaseClassFooterErrorToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_BaseClassFooterTokens_BaseClassFooterExpressionToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"        "));
            
            RenderChildTemplate(null, Model, null, false, null, null, new CustomDelegates { ResolverDelegate = RootTemplate.BaseTemplate, RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });


            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IBaseClassFooterExpressionToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_BaseClassFooterTokens_BaseClassFooterTextToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"        "));
            
            RenderChildTemplate(null, Model, null, false, null, null, new CustomDelegates { ResolverDelegate = RootTemplate.BaseTemplate, });


            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IBaseClassFooterTextToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_BaseClassFooterTokens_BaseClassFooterWarningToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"        "));
            
            RenderChildTemplate(null, Model, null, false, null, null, new CustomDelegates { ResolverDelegate = RootTemplate.BaseTemplate, RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });


            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IBaseClassFooterWarningToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_BaseClassFooterTokens_TemplateContextToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"        private TemplateInstanceContext _templateContextField;
        "));
            Write(this.ToStringHelper.ToStringWithCulture(RootTemplate.GenerationEnvironmentAccessor));
            Write(this.ToStringHelper.ToStringWithCulture(@" TemplateInstanceContext TemplateContext
        {
            get
            {
                if (_templateContextField is null)
                {
                    _templateContextField = TemplateInstanceContext.CreateRootContext(this);
                }
                return _templateContextField;
            }
            set { _templateContextField = value; }
        }
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }


    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_ChildTemplateInitializeCodeTokens_InitializeViewModelTokenTemplate : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            ViewModel = GetViewModel("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.ViewModelName.FormatLiteral(Model.ViewModelNameIsLiteral)));
            if (!string.IsNullOrEmpty(Model.Model)) {

            Write(this.ToStringHelper.ToStringWithCulture(@", "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Model.FormatLiteral(Model.ModelIsLiteral)));
            }
   if (Model.SilentlyContinueOnError) {

            Write(this.ToStringHelper.ToStringWithCulture(@", silentlyContinueOnError: true"));
            }
   if (!string.IsNullOrEmpty(Model.CustomResolverDelegateExpression)) {

            Write(this.ToStringHelper.ToStringWithCulture(@", customResolverDelegate: "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.CustomResolverDelegateExpression.FormatLiteral(Model.CustomResolverDelegateExpressionIsLiteral)));
            }
   if (!string.IsNullOrEmpty(Model.ResolverDelegateModel)) {

            Write(this.ToStringHelper.ToStringWithCulture(@", resolverDelegateModel: "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.ResolverDelegateModel.FormatLiteral(Model.ResolverDelegateModelIsLiteral)));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@") as "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.ViewModelName.Sanitize()));
            Write(this.ToStringHelper.ToStringWithCulture(@";
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IInitializeViewModelToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_ChildTemplateInitializeCodeTokens_RouteChildPlaceholderChildrenDictionaryFieldToRootTemplateToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }


    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_ChildTemplateInitializeCodeTokens_RouteChildTemplatesFieldToRootTemplateToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }


    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_ChildTemplateRenderCodeTokens_TemplateContext_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            var templateContextProperty = templateType.GetProperty(""TemplateContext"", System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic);
            if (templateContextProperty is not null)
            {
                var childContext = TemplateContext.CreateChildContext(template, model, templateType.GetProperty(""ViewModel"")?.GetValue(template), iterationNumber, iterationCount, resolveTemplateName);
                templateContextProperty.SetValue(template, childContext, System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic, null, null, global::System.Globalization.CultureInfo.CurrentCulture);
            }
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }


    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_InitializeTokens_CallAdditionalActionDelegateToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            if (!Model.SkipInitializationCode)
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"            if (additionalActionDelegate is not null)
            {
                additionalActionDelegate();
            }
"));
            }


            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public ICallAdditionalActionDelegateToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_InitializeTokens_ClearChildTemplatesFieldToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            this.ChildTemplates.Clear();
            this.ViewModels.Clear();
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }


    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_InitializeTokens_ClearErrorsToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            this.Errors.Clear();
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }


    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_InitializeTokens_ClearGenerationEnvironmentToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            this.GenerationEnvironment.Clear();
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }


    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_InitializeTokens_ClearPlaceholderTemplatesFieldToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            PlaceholderChildrenDictionary.Clear();
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }


    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_InitializeTokens_EnsureSessionInitializedToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }


    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_InitializeTokens_InitializeAddTemplateToPlaceholderToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            "));
            
            RenderChildTemplate(null, Model, null, false, null, null, new CustomDelegates { ResolverDelegate = RootTemplate.BaseTemplate, RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });


            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IInitializeAddTemplateToPlaceholderToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_InitializeTokens_InitializeBaseToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            base.Initialize("));
            if (Model.AdditionalActionDelegate) {

            Write(this.ToStringHelper.ToStringWithCulture(@"additionalActionDelegate"));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@");
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IInitializeBaseToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_InitializeTokens_InitializeViewModelTokenTemplate : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            ViewModel = GetViewModel("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.ViewModelName.FormatLiteral(Model.ViewModelNameIsLiteral)));
            if (!string.IsNullOrEmpty(Model.Model)) {

            Write(this.ToStringHelper.ToStringWithCulture(@", "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Model.FormatLiteral(Model.ModelIsLiteral)));
            }
   if (Model.SilentlyContinueOnError) {

            Write(this.ToStringHelper.ToStringWithCulture(@", silentlyContinueOnError: true"));
            }
   if (!string.IsNullOrEmpty(Model.CustomResolverDelegateExpression)) {

            Write(this.ToStringHelper.ToStringWithCulture(@", customResolverDelegate: "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.CustomResolverDelegateExpression.FormatLiteral(Model.CustomResolverDelegateExpressionIsLiteral)));
            }
   if (!string.IsNullOrEmpty(Model.ResolverDelegateModel)) {

            Write(this.ToStringHelper.ToStringWithCulture(@", resolverDelegateModel: "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.ResolverDelegateModel.FormatLiteral(Model.ResolverDelegateModelIsLiteral)));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@") as "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.ViewModelName.Sanitize()));
            Write(this.ToStringHelper.ToStringWithCulture(@";
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IInitializeViewModelToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_InitializeTokens_RegisterChildTemplateToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            RegisterChildTemplate("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.ChildTemplateName.FormatLiteral(Model.ChildTemplateNameIsLiteral)));
            Write(this.ToStringHelper.ToStringWithCulture(@", () => new "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.ChildTemplateName.Sanitize()));
            Write(this.ToStringHelper.ToStringWithCulture(@"()"));
            if (!string.IsNullOrEmpty(Model.ModelTypeName) && Model.UseForRouting) {

            Write(this.ToStringHelper.ToStringWithCulture(@", typeof("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.ModelTypeName));
            Write(this.ToStringHelper.ToStringWithCulture(@")"));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@");
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IRegisterChildTemplateToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_InitializeTokens_RegisterPlaceholderToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            RegisterChildTemplate("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.ChildTemplateName.FormatLiteral(Model.ChildTemplateNameIsLiteral)));
            Write(this.ToStringHelper.ToStringWithCulture(@", () => new "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.ChildTemplateName.Sanitize()));
            Write(this.ToStringHelper.ToStringWithCulture(@"()"));
            if (!string.IsNullOrEmpty(Model.ModelTypeName)) {

            Write(this.ToStringHelper.ToStringWithCulture(@", typeof("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.ModelTypeName));
            Write(this.ToStringHelper.ToStringWithCulture(@") "));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@");
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IRegisterPlaceholderToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_InitializeTokens_RegisterViewModelToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            RegisterViewModel("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.ViewModelName.FormatLiteral(Model.ViewModelNameIsLiteral)));
            Write(this.ToStringHelper.ToStringWithCulture(@", () => new "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.ViewModelName.Sanitize()));
            Write(this.ToStringHelper.ToStringWithCulture(@"()"));
            if (!string.IsNullOrEmpty(Model.ModelTypeName) && Model.UseForRouting) {

            Write(this.ToStringHelper.ToStringWithCulture(@", typeof("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.ModelTypeName));
            Write(this.ToStringHelper.ToStringWithCulture(@")"));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@");
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IRegisterViewModelToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_NamespaceFooterTokens_ChildTemplateClassBaseToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            
            RenderChildTemplate(@"T4CSharpCodeGenerator.GeneratedCodeAttribute.Template", ViewModel.GeneratorModel, null, false, null, null, new CustomDelegates { });

            
            RenderChildTemplate(@"T4CSharpCodeGenerator.ExcludeFromCodeCoverageAttribute.Template", ViewModel.RootTemplate, null, false, null, null, new CustomDelegates { RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });

            Write(this.ToStringHelper.ToStringWithCulture(@"    public class "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.ClassName));
            Write(this.ToStringHelper.ToStringWithCulture(@"Child : "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.ClassName));
            Write(this.ToStringHelper.ToStringWithCulture(@"
    {
        public "));
            Write(this.ToStringHelper.ToStringWithCulture(RootTemplate.TemplateClassName));
            Write(this.ToStringHelper.ToStringWithCulture(@" RootTemplate { get; set; }

        public override void Write(string textToAppend)
        {
            if (RootTemplate is not null)
            {
                RootTemplate.Write(textToAppend);
            }
            else
            {
                base.Write(textToAppend);
            }
        }

        public override void WriteLine(string textToAppend)
        {
            if (RootTemplate is not null)
            {
                RootTemplate.WriteLine(textToAppend);
            }
            else
            {
                base.WriteLine(textToAppend);
            }
        }
    }
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }

        protected T4PlusCSharpCodeGenerator_NamespaceFooterTokens_ChildTemplateClassBaseToken_ViewModel _viewModelField;

        /// <summary>
        /// Access the ViewModel parameter of the template.
        /// </summary>
        public T4PlusCSharpCodeGenerator_NamespaceFooterTokens_ChildTemplateClassBaseToken_ViewModel ViewModel
        {
            get
            {
                return this._viewModelField;
            }
            set
            {
                 this._viewModelField = value;
            }
        }

        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }
            ViewModel = GetViewModel(@"T4PlusCSharpCodeGenerator.NamespaceFooterTokens.ChildTemplateClassBaseToken.ViewModel") as T4PlusCSharpCodeGenerator_NamespaceFooterTokens_ChildTemplateClassBaseToken_ViewModel;

        }

        public IChildTemplateClassBaseToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_NamespaceFooterTokens_ChildTemplateClassToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            
            RenderChildTemplate(@"T4CSharpCodeGenerator.GeneratedCodeAttribute.Template", ViewModel.GeneratorModel, null, false, null, null, new CustomDelegates { });

            
            RenderChildTemplate(@"T4CSharpCodeGenerator.ExcludeFromCodeCoverageAttribute.Template", ViewModel.RootTemplate, null, false, null, null, new CustomDelegates { RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });

            Write(this.ToStringHelper.ToStringWithCulture(@"    public class "));
            Write(this.ToStringHelper.ToStringWithCulture(ViewModel.ClassName));
            Write(this.ToStringHelper.ToStringWithCulture(@" : "));
            Write(this.ToStringHelper.ToStringWithCulture(ViewModel.BaseClass));
            Write(this.ToStringHelper.ToStringWithCulture(@"
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
"));
            
            RenderChildTemplate(null, ViewModel.RenderTokens, null, false, null, null, new CustomDelegates { ResolverDelegate = RenderTemplate, RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            Write(this.ToStringHelper.ToStringWithCulture(@"            if (builder is not null) this.GenerationEnvironment = backup;
        }

"));
            
            RenderChildTemplate(null, ViewModel.ParameterTokens, null, false, null, null, new CustomDelegates { ResolverDelegate = ViewModel.RootTemplate.ParameterTokenDeclarationTemplate, RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            Write(this.ToStringHelper.ToStringWithCulture(@"        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
"));
            
            RenderChildTemplate(null, ViewModel.InitializeTokens, null, false, null, null, new CustomDelegates { ResolverDelegate = InitializeTemplate, RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });

            
            RenderChildTemplate(null, ViewModel.ChildInitializeTokens, null, false, null, null, new CustomDelegates { ResolverDelegate = ViewModel.RootTemplate.ChildTemplateInitializeCodeTemplate, RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });

            
            RenderChildTemplate(null, ViewModel.ParameterTokens, null, false, null, null, new CustomDelegates { ResolverDelegate = ViewModel.RootTemplate.ParameterTokenInitializationTemplate, RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            Write(this.ToStringHelper.ToStringWithCulture(@"        }

"));
            if (!string.IsNullOrEmpty(ViewModel.ModelType))
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"        public "));
            Write(this.ToStringHelper.ToStringWithCulture(ViewModel.ModelType));
            Write(this.ToStringHelper.ToStringWithCulture(@" Model { get; set; }
"));
            }

            
            RenderChildTemplate(null, ViewModel.ClassFooterTokens, null, false, null, null, new CustomDelegates { ResolverDelegate = ClassFooterTemplate, RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            Write(this.ToStringHelper.ToStringWithCulture(@"    }
"));
            
            RenderChildTemplate(null, ViewModel.ChildTemplateFooterTokens, null, false, null, null, new CustomDelegates { ResolverDelegate = ViewModel.RootTemplate.ChildTemplateFooterTemplate, RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });


            if (builder is not null) this.GenerationEnvironment = backup;
        }

        protected T4PlusCSharpCodeGenerator_NamespaceFooterTokens_ChildTemplateClassToken_ViewModel _viewModelField;

        /// <summary>
        /// Access the ViewModel parameter of the template.
        /// </summary>
        public T4PlusCSharpCodeGenerator_NamespaceFooterTokens_ChildTemplateClassToken_ViewModel ViewModel
        {
            get
            {
                return this._viewModelField;
            }
            set
            {
                 this._viewModelField = value;
            }
        }

        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }
            ViewModel = GetViewModel(@"T4PlusCSharpCodeGenerator.NamespaceFooterTokens.ChildTemplateClassToken.ViewModel") as T4PlusCSharpCodeGenerator_NamespaceFooterTokens_ChildTemplateClassToken_ViewModel;

        }

        public IChildTemplateClassToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_NamespaceFooterTokens_ChildViewModelClassToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            
            RenderChildTemplate(@"T4CSharpCodeGenerator.GeneratedCodeAttribute.Template", ViewModel.GeneratorModel, null, false, null, null, new CustomDelegates { });

            
            RenderChildTemplate(@"T4CSharpCodeGenerator.ExcludeFromCodeCoverageAttribute.Template", ViewModel.RootTemplate, null, false, null, null, new CustomDelegates { RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });

            Write(this.ToStringHelper.ToStringWithCulture(@"    public class "));
            Write(this.ToStringHelper.ToStringWithCulture(ViewModel.ClassName));
            if (!string.IsNullOrEmpty(ViewModel.BaseClass)) {

            Write(this.ToStringHelper.ToStringWithCulture(@" : "));
            Write(this.ToStringHelper.ToStringWithCulture(ViewModel.BaseClass));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            Write(this.ToStringHelper.ToStringWithCulture(@"    {
"));
            
            RenderChildTemplate(null, ViewModel.ParameterTokens, null, false, null, null, new CustomDelegates { ResolverDelegate = ViewModel.RootTemplate.ParameterTokenDeclarationTemplate, RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });

            if (!string.IsNullOrEmpty(ViewModel.ModelType))
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"        [global::System.ComponentModel.Browsable(false)]
        public "));
            Write(this.ToStringHelper.ToStringWithCulture(ViewModel.ModelType));
            Write(this.ToStringHelper.ToStringWithCulture(@" Model { get; set; }
"));
            }

            
            RenderChildTemplate(null, ViewModel.CopyParameterTokens, null, false, null, null, new CustomDelegates { ResolverDelegate = ViewModel.RootTemplate.ParameterTokenDeclarationTemplate, RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });

            
            RenderChildTemplate(null, ViewModel.ClassFooterTokens, null, false, null, null, new CustomDelegates { ResolverDelegate = ClassFooterTemplate, RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });

            
            RenderChildTemplate(null, ViewModel.ViewModelClassFooterTokens, null, false, null, null, new CustomDelegates { ResolverDelegate = ViewModel.RootTemplate.ViewModelClassFooterTemplate, RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            Write(this.ToStringHelper.ToStringWithCulture(@"    }
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }

        protected T4PlusCSharpCodeGenerator_NamespaceFooterTokens_ChildViewModelClassToken_ViewModel _viewModelField;

        /// <summary>
        /// Access the ViewModel parameter of the template.
        /// </summary>
        public T4PlusCSharpCodeGenerator_NamespaceFooterTokens_ChildViewModelClassToken_ViewModel ViewModel
        {
            get
            {
                return this._viewModelField;
            }
            set
            {
                 this._viewModelField = value;
            }
        }

        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }
            ViewModel = GetViewModel(@"T4PlusCSharpCodeGenerator.NamespaceFooterTokens.ChildViewModelClassToken.ViewModel") as T4PlusCSharpCodeGenerator_NamespaceFooterTokens_ChildViewModelClassToken_ViewModel;

        }

        public IChildViewModelNamespaceFooterClassToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_NamespaceFooterTokens_PlaceholderClassToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            
            RenderChildTemplate(@"T4CSharpCodeGenerator.GeneratedCodeAttribute.Template", ViewModel.GeneratorModel, null, false, null, null, new CustomDelegates { });

            
            RenderChildTemplate(@"T4CSharpCodeGenerator.ExcludeFromCodeCoverageAttribute.Template", ViewModel.RootTemplate, null, false, null, null, new CustomDelegates { RenderChildTemplateDelegate = RenderWithHeaderAndFooter, });

            Write(this.ToStringHelper.ToStringWithCulture(@"    public class "));
            Write(this.ToStringHelper.ToStringWithCulture(ViewModel.ClassNameSanitized));
            Write(this.ToStringHelper.ToStringWithCulture(@" : "));
            Write(this.ToStringHelper.ToStringWithCulture(ViewModel.BaseClass));
            Write(this.ToStringHelper.ToStringWithCulture(@"
    {
        public void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            try
            {
                this.GenerationEnvironment = builder;
                TransformText();
            }
            finally
            {
                this.GenerationEnvironment = backup;
            }
        }

        public virtual string TransformText()
        {
            RootTemplate.ProcessPlaceholder("));
            Write(this.ToStringHelper.ToStringWithCulture(ViewModel.ClassNameCsharpFormatted));
            if (!string.IsNullOrEmpty(ViewModel.ModelType)) {

            Write(this.ToStringHelper.ToStringWithCulture(@", Model"));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@");
            return this.GenerationEnvironment.ToString();
        }

        public virtual void Initialize()
        {
            this.GenerationEnvironment.Clear();
        }

        public "));
            Write(this.ToStringHelper.ToStringWithCulture(ViewModel.RootClassName));
            Write(this.ToStringHelper.ToStringWithCulture(@" RootTemplate { get; set; }

        public override void Write(string textToAppend)
        {
            if (RootTemplate is not null)
            {
                RootTemplate.Write(textToAppend);
            }
            else
            {
                base.Write(textToAppend);
            }
        }

        public override void WriteLine(string textToAppend)
        {
            if (RootTemplate is not null)
            {
                RootTemplate.WriteLine(textToAppend);
            }
            else
            {
                base.WriteLine(textToAppend);
            }
        }

"));
            if (!string.IsNullOrEmpty(ViewModel.ModelType))
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"        public "));
            Write(this.ToStringHelper.ToStringWithCulture(ViewModel.ModelType));
            Write(this.ToStringHelper.ToStringWithCulture(@" Model { get; set; }
"));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@"    }
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }

        protected T4PlusCSharpCodeGenerator_NamespaceFooterTokens_PlaceholderClassToken_ViewModel _viewModelField;

        /// <summary>
        /// Access the ViewModel parameter of the template.
        /// </summary>
        public T4PlusCSharpCodeGenerator_NamespaceFooterTokens_PlaceholderClassToken_ViewModel ViewModel
        {
            get
            {
                return this._viewModelField;
            }
            set
            {
                 this._viewModelField = value;
            }
        }

        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }
            ViewModel = GetViewModel(@"T4PlusCSharpCodeGenerator.NamespaceFooterTokens.PlaceholderClassToken.ViewModel") as T4PlusCSharpCodeGenerator_NamespaceFooterTokens_PlaceholderClassToken_ViewModel;

        }

        public IPlaceholderClassToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_NamespaceFooterTokens_TemplateContextToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"    public class TemplateInstanceContext
    {
        public object Template { get; private set; }
        public object Model { get; set; }
        public object ViewModel { get; set; }
        public string ResolveTemplateName { get; private set; }
        public TemplateInstanceContext ParentContext { get; private set; }
        public TemplateInstanceContext RootContext
        {
            get
            {
                var p = this;
                while (p is not null && p.ParentContext is not null) p = p.ParentContext;
                return p;
            }
        }
        public T GetModelFromContextByType<T>(Func<TemplateInstanceContext, bool> predicate = null)
        {
            var p = this;
            while (p is not null)
            {
                if (p.Model is not null && typeof(T).IsAssignableFrom(p.Model.GetType()))
                {
                    return (T)p.Model;
                }
                p = p.ParentContext;
            }
            return default(T);
        }
        public T GetViewModelFromContextByType<T>(Func<TemplateInstanceContext, bool> predicate = null)
        {
            var p = this;
            while (p is not null)
            {
                if (p.ViewModel is not null && typeof(T).IsAssignableFrom(p.ViewModel.GetType()))
                {
                    return (T)p.ViewModel;
                }
                p = p.ParentContext;
            }
            return default(T);
        }
        public T GetContextByType<T>(Func<TemplateInstanceContext, bool> predicate = null)
        {
            var p = this;
            while (p is not null)
            {
                if (p.Template is not null && typeof(T).IsAssignableFrom(p.Template.GetType()))
                {
                    return (T)p.Template;
                }
                p = p.ParentContext;
            }
            return default(T);
        }
        public bool IsRootContext
        {
            get
            {
                return ParentContext is null;
            }
        }
        public TemplateInstanceContext CreateChildContext(object template, object model, object viewModel = null, int? iterationNumber = null, int? iterationCount = null, string resolveTemplateName = null)
        {
            return new TemplateInstanceContext
            {
                Template = template,
                Model = model,
                ViewModel = viewModel,
                ParentContext = this,
                IterationNumber = iterationNumber,
                IterationCount = iterationCount,
                ResolveTemplateName = resolveTemplateName
            };
        }
        public static TemplateInstanceContext CreateRootContext(object template)
        {
            return new TemplateInstanceContext
            {
                Template = template
            };
        }
        public int? IterationNumber { get; set; }
        public int? IterationCount { get; set; }
        public bool IsFirstIteration
        {
            get
            {
                return IterationNumber.HasValue
                    && IterationCount.HasValue
                    && IterationNumber.Value == 0;
            }
        }
        public bool IsLastIteration
        {
            get
            {
                return IterationNumber.HasValue
                    && IterationCount.HasValue
                    && IterationNumber.Value + 1 == IterationCount.Value;
            }
        }
    }
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }


    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_NamespaceFooterTokens_TemplateFileManagerToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"    public class TemplateFileManager
    {
        private readonly global::System.Action<global::System.Text.StringBuilder> _setStringBuilderDelegate;
        private readonly global::System.Text.StringBuilder _originalStringBuilder;
        private readonly MultipleContentBuilder _builder;

        public TemplateFileManager(global::System.Action<global::System.Text.StringBuilder> setStringBuilderDelegate,
                                   global::System.Func<global::System.Text.StringBuilder> getStringBuilderDelegate,
                                   string basePath = null)
        {
            _setStringBuilderDelegate = setStringBuilderDelegate;
            _originalStringBuilder = getStringBuilderDelegate();
            _builder = new MultipleContentBuilder(basePath);
        }

        public StringBuilder StartNewFile(string fileName = null, bool skipWhenFileExists = false)
        {
            var currentContent = MultipleContentBuilder.AddContent(fileName, skipWhenFileExists, new global::System.Text.StringBuilder());
            _setStringBuilderDelegate(currentContent.Builder);
            return currentContent.Builder;
        }

        public void ResetToDefaultOutput()
        {
            _setStringBuilderDelegate(_originalStringBuilder);
        }

        public override string ToString()
        {
            return _builder.ToString();
        }

        public void Process(bool split = true, bool silentOutput = false)
        {
            ResetToDefaultOutput();

            if (split)
            {
                _originalStringBuilder.Clear();
                if (!silentOutput) _originalStringBuilder.Append(_builder.ToString());
            }
            else if (!silentOutput)
            {
                foreach (var item in _builder.Contents)
                {
                    _originalStringBuilder.Append(item.Builder.ToString());
                }
            }
        }

        public void SaveAll()
        {
            _builder.SaveAll();
        }

        public void SaveLastGeneratedFiles(string lastGeneratedFilesPath)
        {
            _builder.SaveLastGeneratedFiles(lastGeneratedFilesPath);
        }

        public void DeleteLastGeneratedFiles(string lastGeneratedFilesPath)
        {
            _builder.DeleteLastGeneratedFiles(lastGeneratedFilesPath);
        }

        "));
            Write(this.ToStringHelper.ToStringWithCulture(RootTemplate.GenerationEnvironmentAccessor));
            Write(this.ToStringHelper.ToStringWithCulture(@" MultipleContentBuilder MultipleContentBuilder { get { return _builder; } }
    }

    public class MultipleContentBuilder
    {
        private readonly global::System.Collections.Generic.List<Content> _contentList;

        public MultipleContentBuilder(string basePath = null)
        {
            _contentList = new global::System.Collections.Generic.List<Content>();
            BasePath = basePath;
        }

        public string BasePath { get; set; }

        public void SaveAll(Func<string, string> filenameTransformFunc = null, Func<string, string> contentTransformFunc = null)
        {
            foreach (var content in _contentList)
            {
                var path = string.IsNullOrEmpty(BasePath) || global::System.IO.Path.IsPathRooted(content.FileName)
                    ? content.FileName
                    : global::System.IO.Path.Combine(BasePath, content.FileName);

                if (filenameTransformFunc is not null)
                {
                    path = filenameTransformFunc(path);
                }
                var contents = content.Builder.ToString();
                if (contentTransformFunc is not null)
                {
                    contents = contentTransformFunc(contents);
                }
                var dir = global::System.IO.Path.GetDirectoryName(path);
                if (!global::System.IO.Directory.Exists(dir))
                {
                    global::System.IO.Directory.CreateDirectory(dir);
                }
                global::System.IO.File.WriteAllText(path, contents, global::System.Text.Encoding.UTF8);
            }
        }

        public void SaveLastGeneratedFiles(string lastGeneratedFilesPath)
        {
            var fullPath = string.IsNullOrEmpty(BasePath) || global::System.IO.Path.IsPathRooted(lastGeneratedFilesPath)
                ? lastGeneratedFilesPath
                : global::System.IO.Path.Combine(BasePath, lastGeneratedFilesPath);

            var dir = global::System.IO.Path.GetDirectoryName(fullPath);
            if (!global::System.IO.Directory.Exists(dir))
            {
                global::System.IO.Directory.CreateDirectory(dir);
            }

            if (fullPath is not null && !fullPath.Contains(""*""))
            {
                global::System.IO.File.WriteAllLines(fullPath, _contentList.OrderBy(c => c.FileName).Select(c => c.FileName));
            }
        }

        public void DeleteLastGeneratedFiles(string lastGeneratedFilesPath)
        {
            var basePath = BasePath;
            if (lastGeneratedFilesPath?.Contains(""\\"") == true)
            {
                var lastSlash = lastGeneratedFilesPath.LastIndexOf(""\\"");

                basePath = basePath + ""\\"" + lastGeneratedFilesPath.Substring(0, lastSlash);
                lastGeneratedFilesPath = lastGeneratedFilesPath.Substring(lastSlash + 1);
            }

            var fullPath = string.IsNullOrEmpty(basePath) || global::System.IO.Path.IsPathRooted(lastGeneratedFilesPath)
                ? lastGeneratedFilesPath
                : global::System.IO.Path.Combine(basePath, lastGeneratedFilesPath);

            if (!global::System.IO.File.Exists(fullPath))
            {
                if (fullPath is not null && fullPath.Contains(""*"") && !string.IsNullOrEmpty(basePath) && global::System.IO.Directory.Exists(basePath))
                {
                    foreach (var filename in global::System.IO.Directory.GetFiles(basePath, lastGeneratedFilesPath, global::System.IO.SearchOption.AllDirectories))
                    {
                        global::System.IO.File.Delete(filename);
                    }
                }
                // No previously generated files to delete
                return;
            }

            foreach (var fileName in global::System.IO.File.ReadAllLines(fullPath))
            {
                var fileFullPath = string.IsNullOrEmpty(basePath) || global::System.IO.Path.IsPathRooted(fileName)
                    ? fileName
                    : global::System.IO.Path.Combine(basePath, fileName);

                if (global::System.IO.File.Exists(fileFullPath))
                {
                    global::System.IO.File.Delete(fileFullPath);
                }
            }
        }

        public Content AddContent(string fileName = null, bool skipWhenFileExists = false, global::System.Text.StringBuilder builder = null)
        {
            var content = builder is null
            ? new Content
            {
                FileName = fileName,
                SkipWhenFileExists = skipWhenFileExists
            }
            : new Content(builder)
            {
                FileName = fileName,
                SkipWhenFileExists = skipWhenFileExists
            };
            _contentList.Add(content);
            return content;
        }

        public override string ToString()
        {
            var mc = new MultipleContents
            {
                BasePath = BasePath,
                Contents = _contentList.Select(c => new Contents
                {
                    FileName = c.FileName,
                    Lines = c.Builder.ToString().Split(new[] { Environment.NewLine }, StringSplitOptions.None).ToList(),
                    SkipWhenFileExists = c.SkipWhenFileExists
                }).ToList()
            };

            var serializer = new global::System.Runtime.Serialization.DataContractSerializer(typeof(MultipleContents));
            var sb = new global::System.Text.StringBuilder();

            using (var writer = global::System.Xml.XmlWriter.Create(sb, new global::System.Xml.XmlWriterSettings { Indent = true }))
            {
                serializer.WriteObject(writer, mc);
            }

            return sb.ToString();
        }

        public static MultipleContentBuilder FromString(string xml)
        {
            if (string.IsNullOrEmpty(xml))
            {
                return null;
            }

            var result = new MultipleContentBuilder();

            MultipleContents mc;

            // Cope with CA2202 analysis warning by using this unusual statement with try.finally instead of nested usings
            var stringReader = new global::System.IO.StringReader(xml);
            try
            {
                using (var reader = global::System.Xml.XmlReader.Create(stringReader))
                {
                    // Set reference to null because the reader will destroy it
                    stringReader = null;

                    var serializer = new global::System.Runtime.Serialization.DataContractSerializer(typeof(MultipleContents));
                    mc = serializer.ReadObject(reader) as MultipleContents;
                }
            }
            finally
            {
                if (stringReader is not null)
                {
                    stringReader.Dispose();
                }
            }

            if (mc is null)
            {
                return null;
            }

            result.BasePath = mc.BasePath;
            foreach (var item in mc.Contents)
            {
                var c = result.AddContent(item.FileName, item.SkipWhenFileExists);
                foreach (var line in item.Lines)
                {
                    c.Builder.AppendLine(line);
                }
            }

            return result;
        }

        public global::System.Collections.Generic.IEnumerable<Content> Contents { get { return _contentList.AsReadOnly(); } }
    }

    public class Content
    {
        private readonly global::System.Text.StringBuilder _builder;

        public Content()
        {
            _builder = new global::System.Text.StringBuilder();
        }

        public Content(global::System.Text.StringBuilder builder)
        {
            _builder = builder;
        }

        public string FileName { get; set; }

        public bool SkipWhenFileExists { get; set; }

        public global::System.Text.StringBuilder Builder { get { return _builder; } }
    }

    [global::System.Runtime.Serialization.DataContract(Name = ""MultipleContents"", Namespace = ""http://schemas.datacontract.org/2004/07/TextTemplateTransformationFramework"")]
    public class MultipleContents
    {
        public static MultipleContents FromXmlString(string xml)
        {
            if (string.IsNullOrEmpty(xml))
            {
                return null;
            }

            if (xml.IndexOf(XmlStringFragment) == -1)
            {
                return null;
            }

            MultipleContents mc;

            // Cope with CA2202 analysis warning by using this unusual statement with try.finally instead of nested usings
            var stringReader = new global::System.IO.StringReader(xml);
            try
            {
                using (var reader = global::System.Xml.XmlReader.Create(stringReader))
                {
                    // Set reference to null because the reader will destroy it
                    stringReader = null;

                    var serializer = new global::System.Runtime.Serialization.DataContractSerializer(typeof(MultipleContents));
                    mc = serializer.ReadObject(reader) as MultipleContents;
                }
            }
            finally
            {
                if (stringReader is not null)
                {
                    stringReader.Dispose();
                }
            }

            return mc;
        }

        public static MultipleContents FromDelimitedString(string delimitedString)
        {
            if (string.IsNullOrEmpty(delimitedString))
            {
                return null;
            }

            if (delimitedString.IndexOf(DelimitedStringFragment) == -1)
            {
                return null;
            }

            var result = new MultipleContents { Contents = new global::System.Collections.Generic.List<Contents>() };
            var split = delimitedString.Split(new[] { DelimitedStringFragment }, StringSplitOptions.RemoveEmptyEntries);
            for (int i = 0; i < split.Length; i += 2)
            {
                var fileName = Normalize(split[i]);
                bool skipWhenFileExists = false;
                if (fileName.StartsWith(""("") && fileName.EndsWith("")""))
                {
                    fileName = fileName.Substring(1, fileName.Length - 2);
                    skipWhenFileExists = true;
                }
                if (split.Length <= i + 1)
                {
                    continue;
                }
                var lines = split[i + 1].Split(new[] { Environment.NewLine }, StringSplitOptions.None).ToList();
                var c = new Contents
                {
                    FileName = fileName,
                    SkipWhenFileExists = skipWhenFileExists,
                    Lines = lines
                };
                result.Contents.Add(c);
            }

            return result;
        }

        [global::System.Runtime.Serialization.DataMember]
        public string BasePath { get; set; }

        [global::System.Runtime.Serialization.DataMember]
        public global::System.Collections.Generic.List<Contents> Contents { get; set; }

        public const string XmlStringFragment = @""<MultipleContents xmlns:i=""""http://www.w3.org/2001/XMLSchema-instance"""" xmlns=""""http://schemas.datacontract.org/2004/07/TextTemplateTransformation"""">"";

        public const string DelimitedStringFragment = ""!@#$"";

        private static string Normalize(string input)
        {
            return input
                .Replace(Environment.NewLine, """")
                .Trim();
        }

        public void SaveAll(Func<string, string> filenameTransformFunc = null, Func<string, string> contentTransformFunc = null)
        {
            foreach (var content in Contents)
            {
                var path = string.IsNullOrEmpty(BasePath) || global::System.IO.Path.IsPathRooted(content.FileName)
                    ? content.FileName
                    : global::System.IO.Path.Combine(BasePath, content.FileName);

                if (filenameTransformFunc is not null)
                {
                    path = filenameTransformFunc(path);
                }

                if (content.SkipWhenFileExists && global::System.IO.File.Exists(path))
                {
                    continue;
                }

                var contents = string.Join(Environment.NewLine, content.Lines);
                if (contentTransformFunc is not null)
                {
                    contents = contentTransformFunc(contents);
                }
                global::System.IO.File.WriteAllText(path, contents, global::System.Text.Encoding.UTF8);
            }
        }
    }

    [global::System.Runtime.Serialization.DataContract(Name = ""Contents"", Namespace = ""http://schemas.datacontract.org/2004/07/TextTemplateTransformationFramework"")]
    public class Contents
    {
        [global::System.Runtime.Serialization.DataMember]
        public string FileName { get; set; }
        [global::System.Runtime.Serialization.DataMember]
        public global::System.Collections.Generic.List<string> Lines { get; set; }
        [global::System.Runtime.Serialization.DataMember]
        public bool SkipWhenFileExists { get; set; }
    }
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public ITemplateFileManagerToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_RenderTokens_RenderGeneratorAssemblyTokenTemplate : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            TextTemplateTransformationFramework.Runtime.CodeGeneration.CodeGenerationAssembly codeGenerationAssembly = new TextTemplateTransformationFramework.Runtime.CodeGeneration.CodeGenerationAssembly("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.AssemblyName.FormatLiteral(Model.AssemblyNameIsLiteral)));
            Write(this.ToStringHelper.ToStringWithCulture(@", "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.BasePath.FormatLiteral(Model.BasePathIsLiteral)));
            Write(this.ToStringHelper.ToStringWithCulture(@", "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.GenerateMultipleFiles ? "true" : "false"));
            Write(this.ToStringHelper.ToStringWithCulture(@", "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.DryRun ? "true" : "false"));
            Write(this.ToStringHelper.ToStringWithCulture(@", "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.CurrentDirectory.FormatLiteral(Model.CurrentDirectoryIsLiteral)));
            Write(this.ToStringHelper.ToStringWithCulture(@");
            WriteLine(codeGenerationAssembly.Generate());
            codeGenerationAssembly.Dispose();"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IRenderGeneratorAssemblyToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_RenderTokens_RenderRenderChildTemplateTokenTemplate : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"            "));
            
            RenderChildTemplate(null, Model, null, false, null, null, new CustomDelegates { ResolverDelegate = RootTemplate.BaseTemplate, });


            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IRenderChildTemplateToken<TokenParserState> Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_ViewModelClassFooterTokens_TemplateContextViewModelFieldToken_Template : T4CSharpCodeGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder is not null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"        public TemplateInstanceContext TemplateContext { get; set; }
"));

            if (builder is not null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session is null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate is not null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate is not null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }


    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_MainClass_ViewModel : TextTemplateTransformationFramework.T4.CodeGenerators.T4CSharpCodeGenerator_MainClass_ViewModel
    {
        public string InitializeAccessor => Model.TemplateIsOverride ? "override" : "virtual";
        public bool EnableAdditionalActionDelegate => ((T4PlusCSharpCodeGenerator)Model).EnableAdditionalActionDelegate;
        public bool AddRenderMethod => !Model.TemplateIsOverride;
        public IEnumerable<ITemplateToken<TokenParserState>> PreParameterInitializeTokens => Model.Model.OfType<IInitializeToken<TokenParserState>>().Where(t => !(t is IPostParameterInitializeToken<TokenParserState>));
        public IEnumerable<ITemplateToken<TokenParserState>> PostParameterInitializeTokens => Model.Model.OfType<IInitializeToken<TokenParserState>>().Where(t => t is IPostParameterInitializeToken<TokenParserState>);


    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_RenderChildTemplateToken_ViewModel
    {
        [global::System.ComponentModel.Browsable(false)]
        public IRenderChildTemplateToken<TokenParserState> Model { get; set; }
        protected System.Boolean _enableAdditionalActionDelegateField;

        /// <summary>
        /// Access the EnableAdditionalActionDelegate parameter of the template.
        /// </summary>
        [global::System.ComponentModel.Browsable(false)]
        public System.Boolean EnableAdditionalActionDelegate
        {
            get
            {
                return this._enableAdditionalActionDelegateField;
            }
            set
            {
                 this._enableAdditionalActionDelegateField = value;
            }
        }
        public string Name => Model.ChildTemplateName.FormatLiteral(Model.ChildTemplateNameIsLiteral);

        public IEnumerable<string> Arguments
        {
            get
            {
                if (!string.IsNullOrEmpty(Model.Model))
                {
                    yield return ", " + Model.Model.FormatLiteral(Model.ModelIsLiteral);
                }
                else
                {
                    yield return ", null";
                }
                if (Model.Enumerable is not null)
                {
                    yield return ", " + Model.Enumerable.Value.CsharpFormat();
                }
                else
                {
                    yield return ", null";
                }
                if (Model.SilentlyContinueOnError)
                {
                    yield return ", true";
                }
                else
                {
                    yield return ", false";
                }
                if (!string.IsNullOrEmpty(Model.SeparatorTemplateName))
                {
                    yield return ", " + Model.SeparatorTemplateName.FormatLiteral(Model.SeparatorTemplateNameIsLiteral);
                }
                else
                {
                    yield return ", null";
                }
                if (!string.IsNullOrEmpty(Model.ResolverDelegateModel))
                {
                    yield return ", " + Model.ResolverDelegateModel.FormatLiteral(Model.ResolverDelegateModelIsLiteral);
                }
                else
                {
                    yield return ", null";
                }
                yield return ", new CustomDelegates { ";
                if (!string.IsNullOrEmpty(Model.CustomResolverDelegateExpression))
                {
                    yield return "ResolverDelegate = " + Model.CustomResolverDelegateExpression.FormatLiteral(Model.CustomResolverDelegateExpressionIsLiteral) + ", ";
                }
                if (!string.IsNullOrEmpty(Model.CustomRenderChildTemplateDelegateExpression))
                {
                    yield return "RenderChildTemplateDelegate = " + Model.CustomRenderChildTemplateDelegateExpression.FormatLiteral(Model.CustomRenderChildTemplateDelegateExpressionIsLiteral) + ", ";
                }
                if (!string.IsNullOrEmpty(Model.CustomTemplateNameDelegateExpression))
                {
                    yield return "TemplateNameDelegate = " + Model.CustomTemplateNameDelegateExpression.FormatLiteral(Model.CustomTemplateNameDelegateExpressionIsLiteral) + ", ";
                }
                yield return "}";
            }
        }


    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_NamespaceFooterTokens_ChildTemplateClassBaseToken_ViewModel
    {
        public T4PlusCSharpCodeGenerator RootTemplate => TemplateContext.GetContextByType<T4PlusCSharpCodeGenerator>();
        public GeneratorModel GeneratorModel => new GeneratorModel(RootTemplate.GeneratorName, RootTemplate.GeneratorVersion);

        public TemplateInstanceContext TemplateContext { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_NamespaceFooterTokens_ChildTemplateClassToken_ViewModel
    {
        [global::System.ComponentModel.Browsable(false)]
        public IChildTemplateClassToken<TokenParserState> Model { get; set; }
        public T4PlusCSharpCodeGenerator RootTemplate => TemplateContext.GetContextByType<T4PlusCSharpCodeGenerator>();
        public string ClassName => Model.ClassName.Sanitize();
        public string BaseClass => Model.BaseClass;
        public string RootClassName => Model.RootClassName;
        public string ModelType => Model.UseModelForRoutingOnly
            ? string.Empty
            : Model.ModelType;
        public IEnumerable<ITemplateToken<TokenParserState>> RenderTokens => Model.ChildTemplateTokens.OfType<IRenderToken<TokenParserState>>();
        public IEnumerable<ITemplateToken<TokenParserState>> ParameterTokens => Model.ChildTemplateTokens.OfType<TextTemplateTransformationFramework.Common.Contracts.TemplateTokens.IParameterToken<TokenParserState>>();
        public IEnumerable<ITemplateToken<TokenParserState>> InitializeTokens => Model.ChildTemplateTokens.OfType<IInitializeToken<TokenParserState>>();
        public IEnumerable<ITemplateToken<TokenParserState>> ChildInitializeTokens => RootTemplate.Model.OfType<IChildInitializeToken<TokenParserState>>().Concat(Model.ChildTemplateTokens.OfType<IChildInitializeToken<TokenParserState>>());
        public IEnumerable<ITemplateToken<TokenParserState>> ClassFooterTokens => Model.ChildTemplateTokens.OfType<IClassFooterToken<TokenParserState>>();
        public IEnumerable<ITemplateToken<TokenParserState>> ChildTemplateFooterTokens => Model.ChildTemplateTokens.OfType<IChildTemplateFooterToken<TokenParserState>>();
        public GeneratorModel GeneratorModel => new GeneratorModel(RootTemplate.GeneratorName, RootTemplate.GeneratorVersion);

        public TemplateInstanceContext TemplateContext { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_NamespaceFooterTokens_ChildViewModelClassToken_ViewModel
    {
        [global::System.ComponentModel.Browsable(false)]
        public IChildViewModelNamespaceFooterClassToken<TokenParserState> Model { get; set; }
        public T4PlusCSharpCodeGenerator RootTemplate => TemplateContext.GetContextByType<T4PlusCSharpCodeGenerator>();
        public string ClassName => Model.ClassName.Sanitize();
        public string BaseClass => Model.BaseClass;
        public string ModelType => Model.ModelType;
        public IEnumerable<TextTemplateTransformationFramework.Common.Contracts.TemplateTokens.IParameterToken<TokenParserState>> ParameterTokens => Model.ChildTemplateTokens.OfType<TextTemplateTransformationFramework.Common.Contracts.TemplateTokens.IParameterToken<TokenParserState>>();
        public IEnumerable<TextTemplateTransformationFramework.Common.Contracts.TemplateTokens.IParameterToken<TokenParserState>> CopyParameterTokens => Model.CopyPropertiesFromTemplate
            ? Model.SectionContext.ExistingTokens.GetTemplateTokensFromSections<TokenParserState, TextTemplateTransformationFramework.Common.Contracts.TemplateTokens.IParameterToken<TokenParserState>>().Where(t => t.TypeName != ClassName && (t.Name != "Model" || string.IsNullOrEmpty(ModelType)) && !ParameterTokens.Any(pt => pt.Name == t.Name)).Select(t => t.WithPropertySetter())
            : Enumerable.Empty<TextTemplateTransformationFramework.Common.Contracts.TemplateTokens.IParameterToken<TokenParserState>>();
        public IEnumerable<ITemplateToken<TokenParserState>> ClassFooterTokens => Model.ChildTemplateTokens.OfType<IClassFooterToken<TokenParserState>>();
        public IEnumerable<ITemplateToken<TokenParserState>> ViewModelClassFooterTokens => Model.ChildTemplateTokens.OfType<IViewModelClassFooterToken<TokenParserState>>();
        public GeneratorModel GeneratorModel => new GeneratorModel(RootTemplate.GeneratorName, RootTemplate.GeneratorVersion);

        public TemplateInstanceContext TemplateContext { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class T4PlusCSharpCodeGenerator_NamespaceFooterTokens_PlaceholderClassToken_ViewModel
    {
        [global::System.ComponentModel.Browsable(false)]
        public IPlaceholderClassToken<TokenParserState> Model { get; set; }
        public T4PlusCSharpCodeGenerator RootTemplate => TemplateContext.GetContextByType<T4PlusCSharpCodeGenerator>();
        public string ClassNameSanitized => Model.ClassName.Sanitize();
        public string ClassNameCsharpFormatted => Model.ClassName.CsharpFormat();
        public string BaseClass => Model.BaseClass;
        public string RootClassName => Model.RootClassName;
        public string ModelType => Model.UseModelForRoutingOnly
            ? string.Empty
            : Model.ModelType;
        public GeneratorModel GeneratorModel => new GeneratorModel(RootTemplate.GeneratorName, RootTemplate.GeneratorVersion);

        public TemplateInstanceContext TemplateContext { get; set; }

    }

}