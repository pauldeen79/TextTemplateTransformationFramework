<#@ template language="c#" #>
<#@ templateName value="T4PlusCSharpCodeGenerator.RenderChildTemplateCode.Template" #>
        public void RenderChildTemplate(string templateName, object model = null, bool? renderAsEnumerable = null, bool silentlyContinueOnError = false, string separatorTemplateName = null, Func<string, string, Type, object, bool> customResolverDelegate = null, object resolverDelegateModel = null, Action<string, object, object, bool, bool, int?, int?> customRenderChildTemplateDelegate = null, Func<object, string> customTemplateNameDelegate = null)
        {
            if (renderAsEnumerable == null)
            {
                renderAsEnumerable = model is global::System.Collections.IEnumerable && !(model is string);
            }
            if (renderAsEnumerable == true && model != null && model is global::System.Collections.IEnumerable)
            {
                var items = ((global::System.Collections.IEnumerable)model).OfType<object>().ToArray();
                var iterationCount = items.Length;
                var iterationNumber = 0;
                var originalTemplateName = templateName;
                foreach (var item in items)
                {
                    if (customTemplateNameDelegate != null)
                    {
                        var customTemplateName = customTemplateNameDelegate(item);
                        if (!string.IsNullOrEmpty(customTemplateName))
                        {
                            templateName = customTemplateName;
                        }
                        else
                        {
                            templateName = originalTemplateName;
                        }
                    }
                    var template = GetChildTemplate(templateName, resolverDelegateModel ?? item, silentlyContinueOnError, customResolverDelegate);
                    if (template != null)
                    {
                        if (customRenderChildTemplateDelegate != null)
                        {
                            customRenderChildTemplateDelegate.Invoke(templateName, template, item, renderAsEnumerable.Value, silentlyContinueOnError, iterationNumber, iterationCount);
                        }
                        else
                        {
                            RenderTemplate(template, item, iterationNumber, iterationCount);
                        }
                    }
                    if (iterationNumber + 1 < iterationCount && !string.IsNullOrEmpty(separatorTemplateName))
                    {
                        var separatorTemplate = GetChildTemplate(separatorTemplateName, resolverDelegateModel ?? model, silentlyContinueOnError, customResolverDelegate);
                        if (separatorTemplate != null)
                        {
                            if (customRenderChildTemplateDelegate != null)
                            {
                                customRenderChildTemplateDelegate.Invoke(separatorTemplateName, separatorTemplate, item, renderAsEnumerable.Value, silentlyContinueOnError, iterationNumber, iterationCount);
                            }
                            else
                            {
                                RenderTemplate(separatorTemplate, item, iterationNumber, iterationCount);
                            }
                        }
                    }
                    iterationNumber++;
                }
            }
            else
            {
                if (customTemplateNameDelegate != null)
                {
                    var customTemplateName = customTemplateNameDelegate(model);
                    if (!string.IsNullOrEmpty(customTemplateName))
                    {
                        templateName = customTemplateName;
                    }
                }
                var template = GetChildTemplate(templateName, resolverDelegateModel ?? model, silentlyContinueOnError, customResolverDelegate);
                if (template != null)
                {
                    if (customRenderChildTemplateDelegate != null)
                    {
                        customRenderChildTemplateDelegate.Invoke(templateName, template, model, renderAsEnumerable.Value, silentlyContinueOnError, null, null);
                    }
                    else
                    {
                        RenderTemplate(template, model, null, null);
                    }
                }
            }
        }
