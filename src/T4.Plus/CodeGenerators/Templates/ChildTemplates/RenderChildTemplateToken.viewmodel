<#@ template language="c#" #>
<#@ templateName value="T4PlusCSharpCodeGenerator.RenderChildTemplateToken.ViewModel" #>
<#@ model type="IRenderChildTemplateToken<TokenParserState>" #>
<#+
        public string Name => Model.ChildTemplateName.FormatLiteral(Model.ChildTemplateNameIsLiteral);

        public IEnumerable<string> Arguments
        {
            get
            {
                if (!string.IsNullOrEmpty(Model.Model))
                {
                    yield return ", " + Model.Model.FormatLiteral(Model.ModelIsLiteral);
                }
                else
                {
                    yield return ", null";
                }
                if (Model.Enumerable != null)
                {
                    yield return ", " + Model.Enumerable.Value.CsharpFormat();
                }
                else
                {
                    yield return ", null";
                }
                if (Model.SilentlyContinueOnError)
                {
                    yield return ", true";
                }
                else
                {
                    yield return ", false";
                }
                if (!string.IsNullOrEmpty(Model.SeparatorTemplateName))
                {
                    yield return ", " + Model.SeparatorTemplateName.FormatLiteral(Model.SeparatorTemplateNameIsLiteral);
                }
                else
                {
                    yield return ", null";
                }
                if (!string.IsNullOrEmpty(Model.ResolverDelegateModel))
                {
                    yield return ", " + Model.ResolverDelegateModel.FormatLiteral(Model.ResolverDelegateModelIsLiteral);
                }
                else
                {
                    yield return ", null";
                }
                yield return ", new CustomDelegates { ";
                if (!string.IsNullOrEmpty(Model.CustomResolverDelegateExpression))
                {
                    yield return "ResolverDelegate = " + Model.CustomResolverDelegateExpression.FormatLiteral(Model.CustomResolverDelegateExpressionIsLiteral) + ", ";
                }
                if (!string.IsNullOrEmpty(Model.CustomRenderChildTemplateDelegateExpression))
                {
                    yield return "RenderChildTemplateDelegate = " + Model.CustomRenderChildTemplateDelegateExpression.FormatLiteral(Model.CustomRenderChildTemplateDelegateExpressionIsLiteral) + ", ";
                }
                if (!string.IsNullOrEmpty(Model.CustomTemplateNameDelegateExpression))
                {
                    yield return "TemplateNameDelegate = " + Model.CustomTemplateNameDelegateExpression.FormatLiteral(Model.CustomTemplateNameDelegateExpressionIsLiteral) + ", ";
                }
                yield return "}";
            }
        }
#>