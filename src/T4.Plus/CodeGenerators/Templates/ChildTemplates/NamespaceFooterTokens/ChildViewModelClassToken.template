<#@ template language="c#" #>
<#@ templateName value="T4PlusCSharpCodeGenerator.NamespaceFooterTokens.ChildViewModelClassToken.Template" #>
<#@ model type="IChildViewModelNamespaceFooterClassToken<TokenParserState>" #>
<#@ viewModel name="T4PlusCSharpCodeGenerator.NamespaceFooterTokens.ChildViewModelClassToken.ViewModel" #>
<#@ RenderChildTemplate model="ViewModel.GeneratorModel" name="T4CSharpCodeGenerator.GeneratedCodeAttribute.Template" #>
<#@ RenderChildTemplate model="ViewModel.RootTemplate" name="T4CSharpCodeGenerator.ExcludeFromCodeCoverageAttribute.Template" customRenderChildTemplateDelegate="RenderWithHeaderAndFooter" #>
    public class <#= ViewModel.ClassName #><# if (!string.IsNullOrEmpty(ViewModel.BaseClass)) { #> : <#= ViewModel.BaseClass #><# } #>

    {
<#@ RenderChildTemplate model="ViewModel.ParameterTokens" customResolverDelegate="ViewModel.RootTemplate.ParameterTokenDeclarationTemplate" customRenderChildTemplateDelegate="RenderWithHeaderAndFooter" #>
<# if (!string.IsNullOrEmpty(ViewModel.ModelType))
   { #>
        [global::System.ComponentModel.Browsable(false)]
        public <#= ViewModel.ModelType #> Model { get; set; }
<# }
<#@ RenderChildTemplate model="ViewModel.CopyParameterTokens" customResolverDelegate="ViewModel.RootTemplate.ParameterTokenDeclarationTemplate" customRenderChildTemplateDelegate="RenderWithHeaderAndFooter" #>
<#@ RenderChildTemplate model="ViewModel.ClassFooterTokens" customResolverDelegate="ClassFooterTemplate" customRenderChildTemplateDelegate="RenderWithHeaderAndFooter" #>
<#@ RenderChildTemplate model="ViewModel.ViewModelClassFooterTokens" customResolverDelegate="ViewModel.RootTemplate.ViewModelClassFooterTemplate" customRenderChildTemplateDelegate="RenderWithHeaderAndFooter" #>

    }
