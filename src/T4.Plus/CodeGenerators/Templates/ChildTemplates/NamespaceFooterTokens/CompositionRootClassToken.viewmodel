<#@ template language="c#" #>
<#@ templateName value="T4PlusCSharpCodeGenerator.NamespaceFooterTokens.CompositionRootClassToken.ViewModel" #>
<#@ copyPropertiesToViewModel enabled="false" #>
<#@ model type="ICompositionRootClassToken<TokenParserState>" #>
<#@ templateContext #>
<#+
        public T4PlusCSharpCodeGenerator RootTemplate => TemplateContext.GetContextByType<T4PlusCSharpCodeGenerator>();
        public string ClassName => Model.ClassName.Sanitize();
        public string RegistrationMethodsAccessor => Model.RegistrationMethodsAccessor;
        public bool HasBaseClass => RootTemplate.Model.OfType<IBaseClassInheritsFromToken<TokenParserState>>().Any(t => t.ClassName == typeof(T4PlusComposableGeneratedTemplateBase).FullName);
        public string BaseClass => !HasBaseClass
            ? string.Empty
            : " : " + nameof(T4PlusComposableGeneratedTemplateBaseCompositionRoot);
        public string BaseCallArguments => !HasBaseClass
            ? string.Empty
            : " : base(childTemplateModifierDelegate, viewModelModifierDelegate, registerChildTemplateDelegate, registerViewModelDelegate)";
        public GeneratorModel GeneratorModel => new GeneratorModel(RootTemplate.GeneratorName, RootTemplate.GeneratorVersion);
        public IEnumerable<ITemplateToken<TokenParserState>> CompositionRootConstructorCodeTokens => RootTemplate.Model.OfType<ICompositionRootInitializeToken<TokenParserState>>();
        public IEnumerable<ITemplateToken<TokenParserState>> CompositionRootFeatureTokens => RootTemplate.Model.OfType<ICompositionRootFeatureToken<TokenParserState>>();
#>