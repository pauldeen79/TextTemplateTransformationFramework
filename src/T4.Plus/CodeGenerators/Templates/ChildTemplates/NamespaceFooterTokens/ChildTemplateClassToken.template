<#@ template language="c#" #>
<#@ templateName value="T4PlusCSharpCodeGenerator.NamespaceFooterTokens.ChildTemplateClassToken.Template" #>
<#@ model type="IChildTemplateClassToken<TokenParserState>" #>
<#@ viewModel name="T4PlusCSharpCodeGenerator.NamespaceFooterTokens.ChildTemplateClassToken.ViewModel" #>
<#@ RenderChildTemplate model="ViewModel.GeneratorModel" name="T4CSharpCodeGenerator.GeneratedCodeAttribute.Template" #>
<#@ RenderChildTemplate model="ViewModel.RootTemplate" name="T4CSharpCodeGenerator.ExcludeFromCodeCoverageAttribute.Template" customRenderChildTemplateDelegate="RenderWithHeaderAndFooter" #>
    public class <#= ViewModel.ClassName #> : <#= ViewModel.BaseClass #>
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
<#@ RenderChildTemplate model="ViewModel.RenderTokens" customResolverDelegate="RenderTemplate" customRenderChildTemplateDelegate="RenderWithHeaderAndFooter" #>

            if (builder != null) this.GenerationEnvironment = backup;
        }

<#@ RenderChildTemplate model="ViewModel.ParameterTokens" customResolverDelegate="ViewModel.RootTemplate.ParameterTokenDeclarationTemplate" customRenderChildTemplateDelegate="RenderWithHeaderAndFooter" #>

        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
<#@ RenderChildTemplate model="ViewModel.InitializeTokens" customResolverDelegate="InitializeTemplate" customRenderChildTemplateDelegate="RenderWithHeaderAndFooter" #>
<#@ RenderChildTemplate model="ViewModel.ChildInitializeTokens" customResolverDelegate="ViewModel.RootTemplate.ChildTemplateInitializeCodeTemplate" customRenderChildTemplateDelegate="RenderWithHeaderAndFooter" #>
<#@ RenderChildTemplate model="ViewModel.ParameterTokens" customResolverDelegate="ViewModel.RootTemplate.ParameterTokenInitializationTemplate" customRenderChildTemplateDelegate="RenderWithHeaderAndFooter" #>

        }

        public <#= ViewModel.RootClassName #> RootTemplate { get; set; }

        public override void Write(string textToAppend)
        {
            if (RootTemplate != null)
            {
                RootTemplate.Write(textToAppend);
            }
            else
            {
                base.Write(textToAppend);
            }
        }

        public override void WriteLine(string textToAppend)
        {
            if (RootTemplate != null)
            {
                RootTemplate.WriteLine(textToAppend);
            }
            else
            {
                base.WriteLine(textToAppend);
            }
        }

<# if (!string.IsNullOrEmpty(ViewModel.ModelType))
   { #>
        public <#= ViewModel.ModelType #> Model { get; set; }
<# } #>
<#@ RenderChildTemplate model="ViewModel.ClassFooterTokens" customResolverDelegate="ClassFooterTemplate" customRenderChildTemplateDelegate="RenderWithHeaderAndFooter" #>

    }
<#@ RenderChildTemplate model="ViewModel.ChildTemplateFooterTokens" customResolverDelegate="ViewModel.RootTemplate.ChildTemplateFooterTemplate" customRenderChildTemplateDelegate="RenderWithHeaderAndFooter" #>
